<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1254" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1237.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1237.00"> </text><svg id="frames" x="10" width="1180" total_samples="291438668"><g><title>alloc::alloc::exchange_malloc (3,153,660 samples, 1.08%)</title><rect x="0.8206%" y="757" width="1.0821%" height="15" fill="rgb(227,0,7)" fg:x="2391645" fg:w="3153660"/><text x="1.0706%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,153,660 samples, 1.08%)</title><rect x="0.8206%" y="741" width="1.0821%" height="15" fill="rgb(217,0,24)" fg:x="2391645" fg:w="3153660"/><text x="1.0706%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,153,660 samples, 1.08%)</title><rect x="0.8206%" y="725" width="1.0821%" height="15" fill="rgb(221,193,54)" fg:x="2391645" fg:w="3153660"/><text x="1.0706%" y="735.50"></text></g><g><title>alloc::alloc::alloc (3,153,660 samples, 1.08%)</title><rect x="0.8206%" y="709" width="1.0821%" height="15" fill="rgb(248,212,6)" fg:x="2391645" fg:w="3153660"/><text x="1.0706%" y="719.50"></text></g><g><title>malloc (3,153,660 samples, 1.08%)</title><rect x="0.8206%" y="693" width="1.0821%" height="15" fill="rgb(208,68,35)" fg:x="2391645" fg:w="3153660"/><text x="1.0706%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (26,169,426 samples, 8.98%)</title><rect x="13.8988%" y="245" width="8.9794%" height="15" fill="rgb(232,128,0)" fg:x="40506340" fg:w="26169426"/><text x="14.1488%" y="255.50">alloc::sync::..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;redoxql::page::PhysicalPage&gt;&gt; (26,169,426 samples, 8.98%)</title><rect x="13.8988%" y="229" width="8.9794%" height="15" fill="rgb(207,160,47)" fg:x="40506340" fg:w="26169426"/><text x="14.1488%" y="239.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;redoxql::page::PhysicalPage&gt;&gt; (26,169,426 samples, 8.98%)</title><rect x="13.8988%" y="213" width="8.9794%" height="15" fill="rgb(228,23,34)" fg:x="40506340" fg:w="26169426"/><text x="14.1488%" y="223.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;redoxql::page::PhysicalPage&gt; (26,169,426 samples, 8.98%)</title><rect x="13.8988%" y="197" width="8.9794%" height="15" fill="rgb(218,30,26)" fg:x="40506340" fg:w="26169426"/><text x="14.1488%" y="207.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (26,169,426 samples, 8.98%)</title><rect x="13.8988%" y="181" width="8.9794%" height="15" fill="rgb(220,122,19)" fg:x="40506340" fg:w="26169426"/><text x="14.1488%" y="191.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (26,169,426 samples, 8.98%)</title><rect x="13.8988%" y="165" width="8.9794%" height="15" fill="rgb(250,228,42)" fg:x="40506340" fg:w="26169426"/><text x="14.1488%" y="175.50">core::ptr::dr..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26,169,426 samples, 8.98%)</title><rect x="13.8988%" y="149" width="8.9794%" height="15" fill="rgb(240,193,28)" fg:x="40506340" fg:w="26169426"/><text x="14.1488%" y="159.50">&lt;alloc::raw_v..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (26,169,426 samples, 8.98%)</title><rect x="13.8988%" y="133" width="8.9794%" height="15" fill="rgb(216,20,37)" fg:x="40506340" fg:w="26169426"/><text x="14.1488%" y="143.50">&lt;alloc::alloc..</text></g><g><title>alloc::alloc::dealloc (26,169,426 samples, 8.98%)</title><rect x="13.8988%" y="117" width="8.9794%" height="15" fill="rgb(206,188,39)" fg:x="40506340" fg:w="26169426"/><text x="14.1488%" y="127.50">alloc::alloc:..</text></g><g><title>cfree (26,169,426 samples, 8.98%)</title><rect x="13.8988%" y="101" width="8.9794%" height="15" fill="rgb(217,207,13)" fg:x="40506340" fg:w="26169426"/><text x="14.1488%" y="111.50">cfree</text></g><g><title>[libc.so.6] (26,169,426 samples, 8.98%)</title><rect x="13.8988%" y="85" width="8.9794%" height="15" fill="rgb(231,73,38)" fg:x="40506340" fg:w="26169426"/><text x="14.1488%" y="95.50">[libc.so.6]</text></g><g><title>[libc.so.6] (26,169,426 samples, 8.98%)</title><rect x="13.8988%" y="69" width="8.9794%" height="15" fill="rgb(225,20,46)" fg:x="40506340" fg:w="26169426"/><text x="14.1488%" y="79.50">[libc.so.6]</text></g><g><title>[libc.so.6] (26,169,426 samples, 8.98%)</title><rect x="13.8988%" y="53" width="8.9794%" height="15" fill="rgb(210,31,41)" fg:x="40506340" fg:w="26169426"/><text x="14.1488%" y="63.50">[libc.so.6]</text></g><g><title>[libc.so.6] (8,685,018 samples, 2.98%)</title><rect x="19.8981%" y="37" width="2.9800%" height="15" fill="rgb(221,200,47)" fg:x="57990748" fg:w="8685018"/><text x="20.1481%" y="47.50">[li..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46,319,369 samples, 15.89%)</title><rect x="8.4642%" y="325" width="15.8934%" height="15" fill="rgb(226,26,5)" fg:x="24667807" fg:w="46319369"/><text x="8.7142%" y="335.50">&lt;alloc::vec::Vec&lt;T,A&gt; as..</text></g><g><title>core::ptr::drop_in_place&lt;[redoxql::record::RecordAddress]&gt; (46,319,369 samples, 15.89%)</title><rect x="8.4642%" y="309" width="15.8934%" height="15" fill="rgb(249,33,26)" fg:x="24667807" fg:w="46319369"/><text x="8.7142%" y="319.50">core::ptr::drop_in_place..</text></g><g><title>core::ptr::drop_in_place&lt;redoxql::record::RecordAddress&gt; (46,319,369 samples, 15.89%)</title><rect x="8.4642%" y="293" width="15.8934%" height="15" fill="rgb(235,183,28)" fg:x="24667807" fg:w="46319369"/><text x="8.7142%" y="303.50">core::ptr::drop_in_place..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;redoxql::page::PhysicalPage&gt;&gt;&gt; (46,319,369 samples, 15.89%)</title><rect x="8.4642%" y="277" width="15.8934%" height="15" fill="rgb(221,5,38)" fg:x="24667807" fg:w="46319369"/><text x="8.7142%" y="287.50">core::ptr::drop_in_place..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46,319,369 samples, 15.89%)</title><rect x="8.4642%" y="261" width="15.8934%" height="15" fill="rgb(247,18,42)" fg:x="24667807" fg:w="46319369"/><text x="8.7142%" y="271.50">&lt;alloc::sync::Arc&lt;T,A&gt; a..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (4,311,410 samples, 1.48%)</title><rect x="22.8781%" y="245" width="1.4794%" height="15" fill="rgb(241,131,45)" fg:x="66675766" fg:w="4311410"/><text x="23.1281%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_sub (4,311,410 samples, 1.48%)</title><rect x="22.8781%" y="229" width="1.4794%" height="15" fill="rgb(249,31,29)" fg:x="66675766" fg:w="4311410"/><text x="23.1281%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (54,549,638 samples, 18.72%)</title><rect x="8.4642%" y="389" width="18.7174%" height="15" fill="rgb(225,111,53)" fg:x="24667807" fg:w="54549638"/><text x="8.7142%" y="399.50">alloc::sync::Arc&lt;T,A&gt;::drop_s..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;redoxql::record::RecordAddress&gt;&gt;&gt; (54,549,638 samples, 18.72%)</title><rect x="8.4642%" y="373" width="18.7174%" height="15" fill="rgb(238,160,17)" fg:x="24667807" fg:w="54549638"/><text x="8.7142%" y="383.50">core::ptr::drop_in_place&lt;std:..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::vec::Vec&lt;redoxql::record::RecordAddress&gt;&gt;&gt; (54,549,638 samples, 18.72%)</title><rect x="8.4642%" y="357" width="18.7174%" height="15" fill="rgb(214,148,48)" fg:x="24667807" fg:w="54549638"/><text x="8.7142%" y="367.50">core::ptr::drop_in_place&lt;core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;redoxql::record::RecordAddress&gt;&gt; (54,549,638 samples, 18.72%)</title><rect x="8.4642%" y="341" width="18.7174%" height="15" fill="rgb(232,36,49)" fg:x="24667807" fg:w="54549638"/><text x="8.7142%" y="351.50">core::ptr::drop_in_place&lt;allo..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;redoxql::record::RecordAddress&gt;&gt; (8,230,269 samples, 2.82%)</title><rect x="24.3575%" y="325" width="2.8240%" height="15" fill="rgb(209,103,24)" fg:x="70987176" fg:w="8230269"/><text x="24.6075%" y="335.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8,230,269 samples, 2.82%)</title><rect x="24.3575%" y="309" width="2.8240%" height="15" fill="rgb(229,88,8)" fg:x="70987176" fg:w="8230269"/><text x="24.6075%" y="319.50">&lt;a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8,230,269 samples, 2.82%)</title><rect x="24.3575%" y="293" width="2.8240%" height="15" fill="rgb(213,181,19)" fg:x="70987176" fg:w="8230269"/><text x="24.6075%" y="303.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (8,230,269 samples, 2.82%)</title><rect x="24.3575%" y="277" width="2.8240%" height="15" fill="rgb(254,191,54)" fg:x="70987176" fg:w="8230269"/><text x="24.6075%" y="287.50">al..</text></g><g><title>cfree (8,230,269 samples, 2.82%)</title><rect x="24.3575%" y="261" width="2.8240%" height="15" fill="rgb(241,83,37)" fg:x="70987176" fg:w="8230269"/><text x="24.6075%" y="271.50">cf..</text></g><g><title>[libc.so.6] (8,230,269 samples, 2.82%)</title><rect x="24.3575%" y="245" width="2.8240%" height="15" fill="rgb(233,36,39)" fg:x="70987176" fg:w="8230269"/><text x="24.6075%" y="255.50">[l..</text></g><g><title>[libc.so.6] (8,230,269 samples, 2.82%)</title><rect x="24.3575%" y="229" width="2.8240%" height="15" fill="rgb(226,3,54)" fg:x="70987176" fg:w="8230269"/><text x="24.6075%" y="239.50">[l..</text></g><g><title>[libc.so.6] (8,230,269 samples, 2.82%)</title><rect x="24.3575%" y="213" width="2.8240%" height="15" fill="rgb(245,192,40)" fg:x="70987176" fg:w="8230269"/><text x="24.6075%" y="223.50">[l..</text></g><g><title>cfree (4,065,326 samples, 1.39%)</title><rect x="27.1815%" y="389" width="1.3949%" height="15" fill="rgb(238,167,29)" fg:x="79217445" fg:w="4065326"/><text x="27.4315%" y="399.50"></text></g><g><title>[libc.so.6] (4,065,326 samples, 1.39%)</title><rect x="27.1815%" y="373" width="1.3949%" height="15" fill="rgb(232,182,51)" fg:x="79217445" fg:w="4065326"/><text x="27.4315%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;redoxql::database::RDatabase&gt; (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="757" width="27.7732%" height="15" fill="rgb(231,60,39)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="767.50">core::ptr::drop_in_place&lt;redoxql::database::R..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;std::sync::rwlock::RwLock&lt;redoxql::table::RTable&gt;&gt;&gt;&gt; (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="741" width="27.7732%" height="15" fill="rgb(208,69,12)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="751.50">core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="725" width="27.7732%" height="15" fill="rgb(235,93,37)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="735.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Dro..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::sync::Arc&lt;std::sync::rwlock::RwLock&lt;redoxql::table::RTable&gt;&gt;]&gt; (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="709" width="27.7732%" height="15" fill="rgb(213,116,39)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="719.50">core::ptr::drop_in_place&lt;[alloc::sync::Arc&lt;st..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::rwlock::RwLock&lt;redoxql::table::RTable&gt;&gt;&gt; (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="693" width="27.7732%" height="15" fill="rgb(222,207,29)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="703.50">core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="677" width="27.7732%" height="15" fill="rgb(206,96,30)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="687.50">&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Dr..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="661" width="27.7732%" height="15" fill="rgb(218,138,4)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="671.50">alloc::sync::Arc&lt;T,A&gt;::drop_slow</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLock&lt;redoxql::table::RTable&gt;&gt; (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="645" width="27.7732%" height="15" fill="rgb(250,191,14)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="655.50">core::ptr::drop_in_place&lt;std::sync::rwlock::R..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;redoxql::table::RTable&gt;&gt; (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="629" width="27.7732%" height="15" fill="rgb(239,60,40)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="639.50">core::ptr::drop_in_place&lt;core::cell::UnsafeCe..</text></g><g><title>core::ptr::drop_in_place&lt;redoxql::table::RTable&gt; (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="613" width="27.7732%" height="15" fill="rgb(206,27,48)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="623.50">core::ptr::drop_in_place&lt;redoxql::table::RTab..</text></g><g><title>core::ptr::drop_in_place&lt;redoxql::table::PageDirectory&gt; (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="597" width="27.7732%" height="15" fill="rgb(225,35,8)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="607.50">core::ptr::drop_in_place&lt;redoxql::table::Page..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;i64,redoxql::record::Record&gt;&gt; (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="581" width="27.7732%" height="15" fill="rgb(250,213,24)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="591.50">core::ptr::drop_in_place&lt;std::collections::ha..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;i64,redoxql::record::Record,std::hash::random::RandomState&gt;&gt; (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="565" width="27.7732%" height="15" fill="rgb(247,123,22)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="575.50">core::ptr::drop_in_place&lt;hashbrown::map::Hash..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(i64,redoxql::record::Record)&gt;&gt; (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="549" width="27.7732%" height="15" fill="rgb(231,138,38)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="559.50">core::ptr::drop_in_place&lt;hashbrown::raw::RawT..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="533" width="27.7732%" height="15" fill="rgb(231,145,46)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="543.50">&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::..</text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="517" width="27.7732%" height="15" fill="rgb(251,118,11)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="527.50">hashbrown::raw::RawTableInner::drop_inner_tab..</text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="501" width="27.7732%" height="15" fill="rgb(217,147,25)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="511.50">hashbrown::raw::RawTableInner::drop_elements</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="485" width="27.7732%" height="15" fill="rgb(247,81,37)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="495.50">hashbrown::raw::Bucket&lt;T&gt;::drop</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="469" width="27.7732%" height="15" fill="rgb(209,12,38)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="479.50">core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_pl..</text></g><g><title>core::ptr::drop_in_place&lt;(i64,redoxql::record::Record)&gt; (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="453" width="27.7732%" height="15" fill="rgb(227,1,9)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="463.50">core::ptr::drop_in_place&lt;(i64,redoxql::record..</text></g><g><title>core::ptr::drop_in_place&lt;redoxql::record::Record&gt; (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="437" width="27.7732%" height="15" fill="rgb(248,47,43)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="447.50">core::ptr::drop_in_place&lt;redoxql::record::Rec..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;redoxql::record::RecordAddress&gt;&gt;&gt;&gt; (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="421" width="27.7732%" height="15" fill="rgb(221,10,30)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="431.50">core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (80,941,772 samples, 27.77%)</title><rect x="1.9027%" y="405" width="27.7732%" height="15" fill="rgb(210,229,1)" fg:x="5545305" fg:w="80941772"/><text x="2.1527%" y="415.50">&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Dr..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3,204,306 samples, 1.10%)</title><rect x="28.5764%" y="389" width="1.0995%" height="15" fill="rgb(222,148,37)" fg:x="83282771" fg:w="3204306"/><text x="28.8264%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (3,204,306 samples, 1.10%)</title><rect x="28.5764%" y="373" width="1.0995%" height="15" fill="rgb(234,67,33)" fg:x="83282771" fg:w="3204306"/><text x="28.8264%" y="383.50"></text></g><g><title>&lt;redoxql::record::Record as core::clone::Clone&gt;::clone (3,083,250 samples, 1.06%)</title><rect x="29.6759%" y="741" width="1.0579%" height="15" fill="rgb(247,98,35)" fg:x="86487077" fg:w="3083250"/><text x="29.9259%" y="751.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,083,250 samples, 1.06%)</title><rect x="29.6759%" y="725" width="1.0579%" height="15" fill="rgb(247,138,52)" fg:x="86487077" fg:w="3083250"/><text x="29.9259%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;i64&gt;&gt;&gt; (2,820,567 samples, 0.97%)</title><rect x="30.7339%" y="741" width="0.9678%" height="15" fill="rgb(213,79,30)" fg:x="89570327" fg:w="2820567"/><text x="30.9839%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;i64&gt;&gt;&gt; (2,820,567 samples, 0.97%)</title><rect x="30.7339%" y="725" width="0.9678%" height="15" fill="rgb(246,177,23)" fg:x="89570327" fg:w="2820567"/><text x="30.9839%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,820,567 samples, 0.97%)</title><rect x="30.7339%" y="709" width="0.9678%" height="15" fill="rgb(230,62,27)" fg:x="89570327" fg:w="2820567"/><text x="30.9839%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,820,567 samples, 0.97%)</title><rect x="30.7339%" y="693" width="0.9678%" height="15" fill="rgb(216,154,8)" fg:x="89570327" fg:w="2820567"/><text x="30.9839%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (2,820,567 samples, 0.97%)</title><rect x="30.7339%" y="677" width="0.9678%" height="15" fill="rgb(244,35,45)" fg:x="89570327" fg:w="2820567"/><text x="30.9839%" y="687.50"></text></g><g><title>cfree (2,820,567 samples, 0.97%)</title><rect x="30.7339%" y="661" width="0.9678%" height="15" fill="rgb(251,115,12)" fg:x="89570327" fg:w="2820567"/><text x="30.9839%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;redoxql::page::PhysicalPage&gt;&gt; (15,611,320 samples, 5.36%)</title><rect x="31.7017%" y="741" width="5.3566%" height="15" fill="rgb(240,54,50)" fg:x="92390894" fg:w="15611320"/><text x="31.9517%" y="751.50">core::p..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15,611,320 samples, 5.36%)</title><rect x="31.7017%" y="725" width="5.3566%" height="15" fill="rgb(233,84,52)" fg:x="92390894" fg:w="15611320"/><text x="31.9517%" y="735.50">&lt;std::s..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (15,611,320 samples, 5.36%)</title><rect x="31.7017%" y="709" width="5.3566%" height="15" fill="rgb(207,117,47)" fg:x="92390894" fg:w="15611320"/><text x="31.9517%" y="719.50">std::sy..</text></g><g><title>core::sync::atomic::AtomicU32::swap (15,611,320 samples, 5.36%)</title><rect x="31.7017%" y="693" width="5.3566%" height="15" fill="rgb(249,43,39)" fg:x="92390894" fg:w="15611320"/><text x="31.9517%" y="703.50">core::s..</text></g><g><title>core::sync::atomic::atomic_swap (15,611,320 samples, 5.36%)</title><rect x="31.7017%" y="677" width="5.3566%" height="15" fill="rgb(209,38,44)" fg:x="92390894" fg:w="15611320"/><text x="31.9517%" y="687.50">core::s..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,144,511 samples, 1.08%)</title><rect x="38.1431%" y="725" width="1.0790%" height="15" fill="rgb(236,212,23)" fg:x="111163771" fg:w="3144511"/><text x="38.3931%" y="735.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (9,435,127 samples, 3.24%)</title><rect x="39.2221%" y="725" width="3.2374%" height="15" fill="rgb(242,79,21)" fg:x="114308282" fg:w="9435127"/><text x="39.4721%" y="735.50">all..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (6,282,065 samples, 2.16%)</title><rect x="40.3040%" y="709" width="2.1555%" height="15" fill="rgb(211,96,35)" fg:x="117461344" fg:w="6282065"/><text x="40.5540%" y="719.50">a..</text></g><g><title>alloc::alloc::exchange_malloc (6,282,065 samples, 2.16%)</title><rect x="40.3040%" y="693" width="2.1555%" height="15" fill="rgb(253,215,40)" fg:x="117461344" fg:w="6282065"/><text x="40.5540%" y="703.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6,282,065 samples, 2.16%)</title><rect x="40.3040%" y="677" width="2.1555%" height="15" fill="rgb(211,81,21)" fg:x="117461344" fg:w="6282065"/><text x="40.5540%" y="687.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (6,282,065 samples, 2.16%)</title><rect x="40.3040%" y="661" width="2.1555%" height="15" fill="rgb(208,190,38)" fg:x="117461344" fg:w="6282065"/><text x="40.5540%" y="671.50">a..</text></g><g><title>alloc::alloc::alloc (6,282,065 samples, 2.16%)</title><rect x="40.3040%" y="645" width="2.1555%" height="15" fill="rgb(235,213,38)" fg:x="117461344" fg:w="6282065"/><text x="40.5540%" y="655.50">a..</text></g><g><title>malloc (6,282,065 samples, 2.16%)</title><rect x="40.3040%" y="629" width="2.1555%" height="15" fill="rgb(237,122,38)" fg:x="117461344" fg:w="6282065"/><text x="40.5540%" y="639.50">m..</text></g><g><title>[libc.so.6] (3,149,979 samples, 1.08%)</title><rect x="41.3787%" y="613" width="1.0808%" height="15" fill="rgb(244,218,35)" fg:x="120593430" fg:w="3149979"/><text x="41.6287%" y="623.50"></text></g><g><title>[libc.so.6] (3,149,979 samples, 1.08%)</title><rect x="41.3787%" y="597" width="1.0808%" height="15" fill="rgb(240,68,47)" fg:x="120593430" fg:w="3149979"/><text x="41.6287%" y="607.50"></text></g><g><title>__mprotect (3,149,979 samples, 1.08%)</title><rect x="41.3787%" y="581" width="1.0808%" height="15" fill="rgb(210,16,53)" fg:x="120593430" fg:w="3149979"/><text x="41.6287%" y="591.50"></text></g><g><title>[unknown] (3,149,979 samples, 1.08%)</title><rect x="41.3787%" y="565" width="1.0808%" height="15" fill="rgb(235,124,12)" fg:x="120593430" fg:w="3149979"/><text x="41.6287%" y="575.50"></text></g><g><title>[unknown] (3,149,979 samples, 1.08%)</title><rect x="41.3787%" y="549" width="1.0808%" height="15" fill="rgb(224,169,11)" fg:x="120593430" fg:w="3149979"/><text x="41.6287%" y="559.50"></text></g><g><title>[unknown] (3,149,979 samples, 1.08%)</title><rect x="41.3787%" y="533" width="1.0808%" height="15" fill="rgb(250,166,2)" fg:x="120593430" fg:w="3149979"/><text x="41.6287%" y="543.50"></text></g><g><title>[unknown] (3,149,979 samples, 1.08%)</title><rect x="41.3787%" y="517" width="1.0808%" height="15" fill="rgb(242,216,29)" fg:x="120593430" fg:w="3149979"/><text x="41.6287%" y="527.50"></text></g><g><title>[unknown] (3,149,979 samples, 1.08%)</title><rect x="41.3787%" y="501" width="1.0808%" height="15" fill="rgb(230,116,27)" fg:x="120593430" fg:w="3149979"/><text x="41.6287%" y="511.50"></text></g><g><title>[unknown] (3,149,979 samples, 1.08%)</title><rect x="41.3787%" y="485" width="1.0808%" height="15" fill="rgb(228,99,48)" fg:x="120593430" fg:w="3149979"/><text x="41.6287%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (21,640,879 samples, 7.43%)</title><rect x="43.4896%" y="709" width="7.4255%" height="15" fill="rgb(253,11,6)" fg:x="126745555" fg:w="21640879"/><text x="43.7396%" y="719.50">alloc::raw..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (21,640,879 samples, 7.43%)</title><rect x="43.4896%" y="693" width="7.4255%" height="15" fill="rgb(247,143,39)" fg:x="126745555" fg:w="21640879"/><text x="43.7396%" y="703.50">alloc::raw..</text></g><g><title>alloc::raw_vec::finish_grow (21,640,879 samples, 7.43%)</title><rect x="43.4896%" y="677" width="7.4255%" height="15" fill="rgb(236,97,10)" fg:x="126745555" fg:w="21640879"/><text x="43.7396%" y="687.50">alloc::raw..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (21,640,879 samples, 7.43%)</title><rect x="43.4896%" y="661" width="7.4255%" height="15" fill="rgb(233,208,19)" fg:x="126745555" fg:w="21640879"/><text x="43.7396%" y="671.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::Global::grow_impl (21,640,879 samples, 7.43%)</title><rect x="43.4896%" y="645" width="7.4255%" height="15" fill="rgb(216,164,2)" fg:x="126745555" fg:w="21640879"/><text x="43.7396%" y="655.50">alloc::all..</text></g><g><title>alloc::alloc::realloc (21,640,879 samples, 7.43%)</title><rect x="43.4896%" y="629" width="7.4255%" height="15" fill="rgb(220,129,5)" fg:x="126745555" fg:w="21640879"/><text x="43.7396%" y="639.50">alloc::all..</text></g><g><title>realloc (21,640,879 samples, 7.43%)</title><rect x="43.4896%" y="613" width="7.4255%" height="15" fill="rgb(242,17,10)" fg:x="126745555" fg:w="21640879"/><text x="43.7396%" y="623.50">realloc</text></g><g><title>[libc.so.6] (15,469,862 samples, 5.31%)</title><rect x="45.6070%" y="597" width="5.3081%" height="15" fill="rgb(242,107,0)" fg:x="132916572" fg:w="15469862"/><text x="45.8570%" y="607.50">[libc...</text></g><g><title>[libc.so.6] (15,469,862 samples, 5.31%)</title><rect x="45.6070%" y="581" width="5.3081%" height="15" fill="rgb(251,28,31)" fg:x="132916572" fg:w="15469862"/><text x="45.8570%" y="591.50">[libc...</text></g><g><title>[libc.so.6] (12,302,070 samples, 4.22%)</title><rect x="46.6940%" y="565" width="4.2212%" height="15" fill="rgb(233,223,10)" fg:x="136084364" fg:w="12302070"/><text x="46.9440%" y="575.50">[libc..</text></g><g><title>__mprotect (12,302,070 samples, 4.22%)</title><rect x="46.6940%" y="549" width="4.2212%" height="15" fill="rgb(215,21,27)" fg:x="136084364" fg:w="12302070"/><text x="46.9440%" y="559.50">__mpr..</text></g><g><title>[unknown] (12,302,070 samples, 4.22%)</title><rect x="46.6940%" y="533" width="4.2212%" height="15" fill="rgb(232,23,21)" fg:x="136084364" fg:w="12302070"/><text x="46.9440%" y="543.50">[unkn..</text></g><g><title>[unknown] (12,302,070 samples, 4.22%)</title><rect x="46.6940%" y="517" width="4.2212%" height="15" fill="rgb(244,5,23)" fg:x="136084364" fg:w="12302070"/><text x="46.9440%" y="527.50">[unkn..</text></g><g><title>[unknown] (12,302,070 samples, 4.22%)</title><rect x="46.6940%" y="501" width="4.2212%" height="15" fill="rgb(226,81,46)" fg:x="136084364" fg:w="12302070"/><text x="46.9440%" y="511.50">[unkn..</text></g><g><title>[unknown] (12,302,070 samples, 4.22%)</title><rect x="46.6940%" y="485" width="4.2212%" height="15" fill="rgb(247,70,30)" fg:x="136084364" fg:w="12302070"/><text x="46.9440%" y="495.50">[unkn..</text></g><g><title>[unknown] (12,302,070 samples, 4.22%)</title><rect x="46.6940%" y="469" width="4.2212%" height="15" fill="rgb(212,68,19)" fg:x="136084364" fg:w="12302070"/><text x="46.9440%" y="479.50">[unkn..</text></g><g><title>[unknown] (6,185,287 samples, 2.12%)</title><rect x="48.7928%" y="453" width="2.1223%" height="15" fill="rgb(240,187,13)" fg:x="142201147" fg:w="6185287"/><text x="49.0428%" y="463.50">[..</text></g><g><title>[unknown] (3,153,085 samples, 1.08%)</title><rect x="49.8332%" y="437" width="1.0819%" height="15" fill="rgb(223,113,26)" fg:x="145233349" fg:w="3153085"/><text x="50.0832%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (27,759,237 samples, 9.52%)</title><rect x="42.4595%" y="725" width="9.5249%" height="15" fill="rgb(206,192,2)" fg:x="123743409" fg:w="27759237"/><text x="42.7095%" y="735.50">alloc::vec::Ve..</text></g><g><title>core::ptr::write (3,116,212 samples, 1.07%)</title><rect x="50.9151%" y="709" width="1.0693%" height="15" fill="rgb(241,108,4)" fg:x="148386434" fg:w="3116212"/><text x="51.1651%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;redoxql::page::PhysicalPage&gt;&gt;&gt; (6,109,766 samples, 2.10%)</title><rect x="51.9844%" y="725" width="2.0964%" height="15" fill="rgb(247,173,49)" fg:x="151502646" fg:w="6109766"/><text x="52.2344%" y="735.50">c..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,109,766 samples, 2.10%)</title><rect x="51.9844%" y="709" width="2.0964%" height="15" fill="rgb(224,114,35)" fg:x="151502646" fg:w="6109766"/><text x="52.2344%" y="719.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (3,164,313 samples, 1.09%)</title><rect x="54.0808%" y="725" width="1.0858%" height="15" fill="rgb(245,159,27)" fg:x="157612412" fg:w="3164313"/><text x="54.3308%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (3,164,313 samples, 1.09%)</title><rect x="54.0808%" y="709" width="1.0858%" height="15" fill="rgb(245,172,44)" fg:x="157612412" fg:w="3164313"/><text x="54.3308%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,164,313 samples, 1.09%)</title><rect x="54.0808%" y="693" width="1.0858%" height="15" fill="rgb(236,23,11)" fg:x="157612412" fg:w="3164313"/><text x="54.3308%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,164,313 samples, 1.09%)</title><rect x="54.0808%" y="677" width="1.0858%" height="15" fill="rgb(205,117,38)" fg:x="157612412" fg:w="3164313"/><text x="54.3308%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (3,164,313 samples, 1.09%)</title><rect x="54.0808%" y="661" width="1.0858%" height="15" fill="rgb(237,72,25)" fg:x="157612412" fg:w="3164313"/><text x="54.3308%" y="671.50"></text></g><g><title>cfree (3,164,313 samples, 1.09%)</title><rect x="54.0808%" y="645" width="1.0858%" height="15" fill="rgb(244,70,9)" fg:x="157612412" fg:w="3164313"/><text x="54.3308%" y="655.50"></text></g><g><title>[libc.so.6] (3,164,313 samples, 1.09%)</title><rect x="54.0808%" y="629" width="1.0858%" height="15" fill="rgb(217,125,39)" fg:x="157612412" fg:w="3164313"/><text x="54.3308%" y="639.50"></text></g><g><title>redoxql::container::TailContainer::column_page (3,157,604 samples, 1.08%)</title><rect x="55.1666%" y="725" width="1.0835%" height="15" fill="rgb(235,36,10)" fg:x="160776725" fg:w="3157604"/><text x="55.4166%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,157,604 samples, 1.08%)</title><rect x="55.1666%" y="709" width="1.0835%" height="15" fill="rgb(251,123,47)" fg:x="160776725" fg:w="3157604"/><text x="55.4166%" y="719.50"></text></g><g><title>redoxql::page::PhysicalPage::write (5,602,959 samples, 1.92%)</title><rect x="56.2500%" y="725" width="1.9225%" height="15" fill="rgb(221,13,13)" fg:x="163934329" fg:w="5602959"/><text x="56.5000%" y="735.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5,602,959 samples, 1.92%)</title><rect x="56.2500%" y="709" width="1.9225%" height="15" fill="rgb(238,131,9)" fg:x="163934329" fg:w="5602959"/><text x="56.5000%" y="719.50">a..</text></g><g><title>core::ptr::write (2,444,981 samples, 0.84%)</title><rect x="57.3336%" y="693" width="0.8389%" height="15" fill="rgb(211,50,8)" fg:x="167092307" fg:w="2444981"/><text x="57.5836%" y="703.50"></text></g><g><title>[unknown] (2,444,981 samples, 0.84%)</title><rect x="57.3336%" y="677" width="0.8389%" height="15" fill="rgb(245,182,24)" fg:x="167092307" fg:w="2444981"/><text x="57.5836%" y="687.50"></text></g><g><title>redoxql::container::TailContainer::insert_record (64,685,668 samples, 22.20%)</title><rect x="37.0583%" y="741" width="22.1953%" height="15" fill="rgb(242,14,37)" fg:x="108002214" fg:w="64685668"/><text x="37.3083%" y="751.50">redoxql::container::TailContainer::..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (3,150,594 samples, 1.08%)</title><rect x="58.1725%" y="725" width="1.0810%" height="15" fill="rgb(246,228,12)" fg:x="169537288" fg:w="3150594"/><text x="58.4225%" y="735.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (3,150,594 samples, 1.08%)</title><rect x="58.1725%" y="709" width="1.0810%" height="15" fill="rgb(213,55,15)" fg:x="169537288" fg:w="3150594"/><text x="58.4225%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (3,150,594 samples, 1.08%)</title><rect x="58.1725%" y="693" width="1.0810%" height="15" fill="rgb(209,9,3)" fg:x="169537288" fg:w="3150594"/><text x="58.4225%" y="703.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (3,150,594 samples, 1.08%)</title><rect x="58.1725%" y="677" width="1.0810%" height="15" fill="rgb(230,59,30)" fg:x="169537288" fg:w="3150594"/><text x="58.4225%" y="687.50"></text></g><g><title>redoxql::index::RIndex::get (3,148,484 samples, 1.08%)</title><rect x="59.2536%" y="741" width="1.0803%" height="15" fill="rgb(209,121,21)" fg:x="172687882" fg:w="3148484"/><text x="59.5036%" y="751.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (3,148,484 samples, 1.08%)</title><rect x="59.2536%" y="725" width="1.0803%" height="15" fill="rgb(220,109,13)" fg:x="172687882" fg:w="3148484"/><text x="59.5036%" y="735.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3,148,484 samples, 1.08%)</title><rect x="59.2536%" y="709" width="1.0803%" height="15" fill="rgb(232,18,1)" fg:x="172687882" fg:w="3148484"/><text x="59.5036%" y="719.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (3,148,484 samples, 1.08%)</title><rect x="59.2536%" y="693" width="1.0803%" height="15" fill="rgb(215,41,42)" fg:x="172687882" fg:w="3148484"/><text x="59.5036%" y="703.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3,148,484 samples, 1.08%)</title><rect x="59.2536%" y="677" width="1.0803%" height="15" fill="rgb(224,123,36)" fg:x="172687882" fg:w="3148484"/><text x="59.5036%" y="687.50"></text></g><g><title>&lt;redoxql::record::RecordAddress as core::clone::Clone&gt;::clone (12,030,265 samples, 4.13%)</title><rect x="61.2309%" y="645" width="4.1279%" height="15" fill="rgb(240,125,3)" fg:x="178450410" fg:w="12030265"/><text x="61.4809%" y="655.50">&lt;red..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (12,030,265 samples, 4.13%)</title><rect x="61.2309%" y="629" width="4.1279%" height="15" fill="rgb(205,98,50)" fg:x="178450410" fg:w="12030265"/><text x="61.4809%" y="639.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (17,697,858 samples, 6.07%)</title><rect x="60.3339%" y="709" width="6.0726%" height="15" fill="rgb(205,185,37)" fg:x="175836366" fg:w="17697858"/><text x="60.5839%" y="719.50">&lt;alloc::..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17,697,858 samples, 6.07%)</title><rect x="60.3339%" y="693" width="6.0726%" height="15" fill="rgb(238,207,15)" fg:x="175836366" fg:w="17697858"/><text x="60.5839%" y="703.50">alloc::s..</text></g><g><title>alloc::slice::hack::to_vec (17,697,858 samples, 6.07%)</title><rect x="60.3339%" y="677" width="6.0726%" height="15" fill="rgb(213,199,42)" fg:x="175836366" fg:w="17697858"/><text x="60.5839%" y="687.50">alloc::s..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17,697,858 samples, 6.07%)</title><rect x="60.3339%" y="661" width="6.0726%" height="15" fill="rgb(235,201,11)" fg:x="175836366" fg:w="17697858"/><text x="60.5839%" y="671.50">&lt;T as al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,053,549 samples, 1.05%)</title><rect x="65.3588%" y="645" width="1.0478%" height="15" fill="rgb(207,46,11)" fg:x="190480675" fg:w="3053549"/><text x="65.6088%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,053,549 samples, 1.05%)</title><rect x="65.3588%" y="629" width="1.0478%" height="15" fill="rgb(241,35,35)" fg:x="190480675" fg:w="3053549"/><text x="65.6088%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3,053,549 samples, 1.05%)</title><rect x="65.3588%" y="613" width="1.0478%" height="15" fill="rgb(243,32,47)" fg:x="190480675" fg:w="3053549"/><text x="65.6088%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,053,549 samples, 1.05%)</title><rect x="65.3588%" y="597" width="1.0478%" height="15" fill="rgb(247,202,23)" fg:x="190480675" fg:w="3053549"/><text x="65.6088%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3,053,549 samples, 1.05%)</title><rect x="65.3588%" y="581" width="1.0478%" height="15" fill="rgb(219,102,11)" fg:x="190480675" fg:w="3053549"/><text x="65.6088%" y="591.50"></text></g><g><title>alloc::alloc::alloc (3,053,549 samples, 1.05%)</title><rect x="65.3588%" y="565" width="1.0478%" height="15" fill="rgb(243,110,44)" fg:x="190480675" fg:w="3053549"/><text x="65.6088%" y="575.50"></text></g><g><title>malloc (3,053,549 samples, 1.05%)</title><rect x="65.3588%" y="549" width="1.0478%" height="15" fill="rgb(222,74,54)" fg:x="190480675" fg:w="3053549"/><text x="65.6088%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (11,837,255 samples, 4.06%)</title><rect x="66.4065%" y="709" width="4.0617%" height="15" fill="rgb(216,99,12)" fg:x="193534224" fg:w="11837255"/><text x="66.6565%" y="719.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8,831,818 samples, 3.03%)</title><rect x="67.4377%" y="693" width="3.0304%" height="15" fill="rgb(226,22,26)" fg:x="196539661" fg:w="8831818"/><text x="67.6877%" y="703.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8,831,818 samples, 3.03%)</title><rect x="67.4377%" y="677" width="3.0304%" height="15" fill="rgb(217,163,10)" fg:x="196539661" fg:w="8831818"/><text x="67.6877%" y="687.50">all..</text></g><g><title>alloc::raw_vec::finish_grow (8,831,818 samples, 3.03%)</title><rect x="67.4377%" y="661" width="3.0304%" height="15" fill="rgb(213,25,53)" fg:x="196539661" fg:w="8831818"/><text x="67.6877%" y="671.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (8,831,818 samples, 3.03%)</title><rect x="67.4377%" y="645" width="3.0304%" height="15" fill="rgb(252,105,26)" fg:x="196539661" fg:w="8831818"/><text x="67.6877%" y="655.50">&lt;al..</text></g><g><title>alloc::alloc::Global::grow_impl (8,831,818 samples, 3.03%)</title><rect x="67.4377%" y="629" width="3.0304%" height="15" fill="rgb(220,39,43)" fg:x="196539661" fg:w="8831818"/><text x="67.6877%" y="639.50">all..</text></g><g><title>alloc::alloc::realloc (8,831,818 samples, 3.03%)</title><rect x="67.4377%" y="613" width="3.0304%" height="15" fill="rgb(229,68,48)" fg:x="196539661" fg:w="8831818"/><text x="67.6877%" y="623.50">all..</text></g><g><title>realloc (8,831,818 samples, 3.03%)</title><rect x="67.4377%" y="597" width="3.0304%" height="15" fill="rgb(252,8,32)" fg:x="196539661" fg:w="8831818"/><text x="67.6877%" y="607.50">rea..</text></g><g><title>[libc.so.6] (8,831,818 samples, 3.03%)</title><rect x="67.4377%" y="581" width="3.0304%" height="15" fill="rgb(223,20,43)" fg:x="196539661" fg:w="8831818"/><text x="67.6877%" y="591.50">[li..</text></g><g><title>[libc.so.6] (8,831,818 samples, 3.03%)</title><rect x="67.4377%" y="565" width="3.0304%" height="15" fill="rgb(229,81,49)" fg:x="196539661" fg:w="8831818"/><text x="67.6877%" y="575.50">[li..</text></g><g><title>core::option::Option&lt;T&gt;::expect (6,271,630 samples, 2.15%)</title><rect x="70.4682%" y="709" width="2.1520%" height="15" fill="rgb(236,28,36)" fg:x="205371479" fg:w="6271630"/><text x="70.7182%" y="719.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;redoxql::record::RecordAddress&gt; (12,164,226 samples, 4.17%)</title><rect x="72.6201%" y="709" width="4.1739%" height="15" fill="rgb(249,185,26)" fg:x="211643109" fg:w="12164226"/><text x="72.8701%" y="719.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;redoxql::page::PhysicalPage&gt;&gt;&gt; (12,164,226 samples, 4.17%)</title><rect x="72.6201%" y="693" width="4.1739%" height="15" fill="rgb(249,174,33)" fg:x="211643109" fg:w="12164226"/><text x="72.8701%" y="703.50">core:..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,164,226 samples, 4.17%)</title><rect x="72.6201%" y="677" width="4.1739%" height="15" fill="rgb(233,201,37)" fg:x="211643109" fg:w="12164226"/><text x="72.8701%" y="687.50">&lt;allo..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;redoxql::page::PhysicalPage&gt;&gt; (5,985,629 samples, 2.05%)</title><rect x="76.7940%" y="709" width="2.0538%" height="15" fill="rgb(221,78,26)" fg:x="223807335" fg:w="5985629"/><text x="77.0440%" y="719.50">c..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5,985,629 samples, 2.05%)</title><rect x="76.7940%" y="693" width="2.0538%" height="15" fill="rgb(250,127,30)" fg:x="223807335" fg:w="5985629"/><text x="77.0440%" y="703.50">&lt;..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (5,985,629 samples, 2.05%)</title><rect x="76.7940%" y="677" width="2.0538%" height="15" fill="rgb(230,49,44)" fg:x="223807335" fg:w="5985629"/><text x="77.0440%" y="687.50">s..</text></g><g><title>redoxql::page::PhysicalPage::read (2,645,122 samples, 0.91%)</title><rect x="78.8478%" y="709" width="0.9076%" height="15" fill="rgb(229,67,23)" fg:x="229792964" fg:w="2645122"/><text x="79.0978%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,645,122 samples, 0.91%)</title><rect x="78.8478%" y="693" width="0.9076%" height="15" fill="rgb(249,83,47)" fg:x="229792964" fg:w="2645122"/><text x="79.0978%" y="703.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,645,122 samples, 0.91%)</title><rect x="78.8478%" y="677" width="0.9076%" height="15" fill="rgb(215,43,3)" fg:x="229792964" fg:w="2645122"/><text x="79.0978%" y="687.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,645,122 samples, 0.91%)</title><rect x="78.8478%" y="661" width="0.9076%" height="15" fill="rgb(238,154,13)" fg:x="229792964" fg:w="2645122"/><text x="79.0978%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (6,190,024 samples, 2.12%)</title><rect x="79.7554%" y="677" width="2.1240%" height="15" fill="rgb(219,56,2)" fg:x="232438086" fg:w="6190024"/><text x="80.0054%" y="687.50">c..</text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (6,190,024 samples, 2.12%)</title><rect x="79.7554%" y="661" width="2.1240%" height="15" fill="rgb(233,0,4)" fg:x="232438086" fg:w="6190024"/><text x="80.0054%" y="671.50">c..</text></g><g><title>redoxql::pagerange::PageRange::read (65,180,662 samples, 22.37%)</title><rect x="60.3339%" y="741" width="22.3651%" height="15" fill="rgb(235,30,7)" fg:x="175836366" fg:w="65180662"/><text x="60.5839%" y="751.50">redoxql::pagerange::PageRange::read</text></g><g><title>redoxql::container::BaseContainer::read_record (65,180,662 samples, 22.37%)</title><rect x="60.3339%" y="725" width="22.3651%" height="15" fill="rgb(250,79,13)" fg:x="175836366" fg:w="65180662"/><text x="60.5839%" y="735.50">redoxql::container::BaseContainer::..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (8,578,942 samples, 2.94%)</title><rect x="79.7554%" y="709" width="2.9437%" height="15" fill="rgb(211,146,34)" fg:x="232438086" fg:w="8578942"/><text x="80.0054%" y="719.50">st..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (8,578,942 samples, 2.94%)</title><rect x="79.7554%" y="693" width="2.9437%" height="15" fill="rgb(228,22,38)" fg:x="232438086" fg:w="8578942"/><text x="80.0054%" y="703.50">st..</text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (2,388,918 samples, 0.82%)</title><rect x="81.8794%" y="677" width="0.8197%" height="15" fill="rgb(235,168,5)" fg:x="238628110" fg:w="2388918"/><text x="82.1294%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2,388,918 samples, 0.82%)</title><rect x="81.8794%" y="661" width="0.8197%" height="15" fill="rgb(221,155,16)" fg:x="238628110" fg:w="2388918"/><text x="82.1294%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3,007,014 samples, 1.03%)</title><rect x="82.6991%" y="613" width="1.0318%" height="15" fill="rgb(215,215,53)" fg:x="241017028" fg:w="3007014"/><text x="82.9491%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3,007,014 samples, 1.03%)</title><rect x="82.6991%" y="597" width="1.0318%" height="15" fill="rgb(223,4,10)" fg:x="241017028" fg:w="3007014"/><text x="82.9491%" y="607.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5,500,877 samples, 1.89%)</title><rect x="82.6991%" y="661" width="1.8875%" height="15" fill="rgb(234,103,6)" fg:x="241017028" fg:w="5500877"/><text x="82.9491%" y="671.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5,500,877 samples, 1.89%)</title><rect x="82.6991%" y="645" width="1.8875%" height="15" fill="rgb(227,97,0)" fg:x="241017028" fg:w="5500877"/><text x="82.9491%" y="655.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5,500,877 samples, 1.89%)</title><rect x="82.6991%" y="629" width="1.8875%" height="15" fill="rgb(234,150,53)" fg:x="241017028" fg:w="5500877"/><text x="82.9491%" y="639.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2,493,863 samples, 0.86%)</title><rect x="83.7308%" y="613" width="0.8557%" height="15" fill="rgb(228,201,54)" fg:x="244024042" fg:w="2493863"/><text x="83.9808%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2,493,863 samples, 0.86%)</title><rect x="83.7308%" y="597" width="0.8557%" height="15" fill="rgb(222,22,37)" fg:x="244024042" fg:w="2493863"/><text x="83.9808%" y="607.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3,107,533 samples, 1.07%)</title><rect x="84.5865%" y="661" width="1.0663%" height="15" fill="rgb(237,53,32)" fg:x="246517905" fg:w="3107533"/><text x="84.8365%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (17,082,919 samples, 5.86%)</title><rect x="82.6991%" y="693" width="5.8616%" height="15" fill="rgb(233,25,53)" fg:x="241017028" fg:w="17082919"/><text x="82.9491%" y="703.50">hashbro..</text></g><g><title>core::hash::BuildHasher::hash_one (17,082,919 samples, 5.86%)</title><rect x="82.6991%" y="677" width="5.8616%" height="15" fill="rgb(210,40,34)" fg:x="241017028" fg:w="17082919"/><text x="82.9491%" y="687.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (8,474,509 samples, 2.91%)</title><rect x="85.6528%" y="661" width="2.9078%" height="15" fill="rgb(241,220,44)" fg:x="249625438" fg:w="8474509"/><text x="85.9028%" y="671.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i64&gt;::hash (8,474,509 samples, 2.91%)</title><rect x="85.6528%" y="645" width="2.9078%" height="15" fill="rgb(235,28,35)" fg:x="249625438" fg:w="8474509"/><text x="85.9028%" y="655.50">co..</text></g><g><title>core::hash::Hasher::write_i64 (8,474,509 samples, 2.91%)</title><rect x="85.6528%" y="629" width="2.9078%" height="15" fill="rgb(210,56,17)" fg:x="249625438" fg:w="8474509"/><text x="85.9028%" y="639.50">co..</text></g><g><title>core::hash::Hasher::write_u64 (8,474,509 samples, 2.91%)</title><rect x="85.6528%" y="613" width="2.9078%" height="15" fill="rgb(224,130,29)" fg:x="249625438" fg:w="8474509"/><text x="85.9028%" y="623.50">co..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8,474,509 samples, 2.91%)</title><rect x="85.6528%" y="597" width="2.9078%" height="15" fill="rgb(235,212,8)" fg:x="249625438" fg:w="8474509"/><text x="85.9028%" y="607.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8,474,509 samples, 2.91%)</title><rect x="85.6528%" y="581" width="2.9078%" height="15" fill="rgb(223,33,50)" fg:x="249625438" fg:w="8474509"/><text x="85.9028%" y="591.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,474,509 samples, 2.91%)</title><rect x="85.6528%" y="565" width="2.9078%" height="15" fill="rgb(219,149,13)" fg:x="249625438" fg:w="8474509"/><text x="85.9028%" y="575.50">&lt;c..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (22,865,595 samples, 7.85%)</title><rect x="82.6991%" y="741" width="7.8458%" height="15" fill="rgb(250,156,29)" fg:x="241017028" fg:w="22865595"/><text x="82.9491%" y="751.50">std::collec..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (22,865,595 samples, 7.85%)</title><rect x="82.6991%" y="725" width="7.8458%" height="15" fill="rgb(216,193,19)" fg:x="241017028" fg:w="22865595"/><text x="82.9491%" y="735.50">hashbrown::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (22,865,595 samples, 7.85%)</title><rect x="82.6991%" y="709" width="7.8458%" height="15" fill="rgb(216,135,14)" fg:x="241017028" fg:w="22865595"/><text x="82.9491%" y="719.50">hashbrown::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (5,782,676 samples, 1.98%)</title><rect x="88.5606%" y="693" width="1.9842%" height="15" fill="rgb(241,47,5)" fg:x="258099947" fg:w="5782676"/><text x="88.8106%" y="703.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5,782,676 samples, 1.98%)</title><rect x="88.5606%" y="677" width="1.9842%" height="15" fill="rgb(233,42,35)" fg:x="258099947" fg:w="5782676"/><text x="88.8106%" y="687.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5,782,676 samples, 1.98%)</title><rect x="88.5606%" y="661" width="1.9842%" height="15" fill="rgb(231,13,6)" fg:x="258099947" fg:w="5782676"/><text x="88.8106%" y="671.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (2,404,635 samples, 0.83%)</title><rect x="90.5448%" y="629" width="0.8251%" height="15" fill="rgb(207,181,40)" fg:x="263882623" fg:w="2404635"/><text x="90.7948%" y="639.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (2,404,635 samples, 0.83%)</title><rect x="90.5448%" y="613" width="0.8251%" height="15" fill="rgb(254,173,49)" fg:x="263882623" fg:w="2404635"/><text x="90.7948%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (2,404,635 samples, 0.83%)</title><rect x="90.5448%" y="597" width="0.8251%" height="15" fill="rgb(221,1,38)" fg:x="263882623" fg:w="2404635"/><text x="90.7948%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2,404,635 samples, 0.83%)</title><rect x="90.5448%" y="581" width="0.8251%" height="15" fill="rgb(206,124,46)" fg:x="263882623" fg:w="2404635"/><text x="90.7948%" y="591.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2,404,635 samples, 0.83%)</title><rect x="90.5448%" y="565" width="0.8251%" height="15" fill="rgb(249,21,11)" fg:x="263882623" fg:w="2404635"/><text x="90.7948%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2,404,635 samples, 0.83%)</title><rect x="90.5448%" y="549" width="0.8251%" height="15" fill="rgb(222,201,40)" fg:x="263882623" fg:w="2404635"/><text x="90.7948%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2,404,635 samples, 0.83%)</title><rect x="90.5448%" y="533" width="0.8251%" height="15" fill="rgb(235,61,29)" fg:x="263882623" fg:w="2404635"/><text x="90.7948%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (5,560,346 samples, 1.91%)</title><rect x="90.5448%" y="693" width="1.9079%" height="15" fill="rgb(219,207,3)" fg:x="263882623" fg:w="5560346"/><text x="90.7948%" y="703.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5,560,346 samples, 1.91%)</title><rect x="90.5448%" y="677" width="1.9079%" height="15" fill="rgb(222,56,46)" fg:x="263882623" fg:w="5560346"/><text x="90.7948%" y="687.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (5,560,346 samples, 1.91%)</title><rect x="90.5448%" y="661" width="1.9079%" height="15" fill="rgb(239,76,54)" fg:x="263882623" fg:w="5560346"/><text x="90.7948%" y="671.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (5,560,346 samples, 1.91%)</title><rect x="90.5448%" y="645" width="1.9079%" height="15" fill="rgb(231,124,27)" fg:x="263882623" fg:w="5560346"/><text x="90.7948%" y="655.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (3,155,711 samples, 1.08%)</title><rect x="91.3699%" y="629" width="1.0828%" height="15" fill="rgb(249,195,6)" fg:x="266287258" fg:w="3155711"/><text x="91.6199%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (3,155,711 samples, 1.08%)</title><rect x="91.3699%" y="613" width="1.0828%" height="15" fill="rgb(237,174,47)" fg:x="266287258" fg:w="3155711"/><text x="91.6199%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (3,155,711 samples, 1.08%)</title><rect x="91.3699%" y="597" width="1.0828%" height="15" fill="rgb(206,201,31)" fg:x="266287258" fg:w="3155711"/><text x="91.6199%" y="607.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3,155,711 samples, 1.08%)</title><rect x="91.3699%" y="581" width="1.0828%" height="15" fill="rgb(231,57,52)" fg:x="266287258" fg:w="3155711"/><text x="91.6199%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3,069,556 samples, 1.05%)</title><rect x="92.4527%" y="677" width="1.0532%" height="15" fill="rgb(248,177,22)" fg:x="269442969" fg:w="3069556"/><text x="92.7027%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (3,069,556 samples, 1.05%)</title><rect x="92.4527%" y="661" width="1.0532%" height="15" fill="rgb(215,211,37)" fg:x="269442969" fg:w="3069556"/><text x="92.7027%" y="671.50"></text></g><g><title>hashbrown::raw::is_full (3,069,556 samples, 1.05%)</title><rect x="92.4527%" y="645" width="1.0532%" height="15" fill="rgb(241,128,51)" fg:x="269442969" fg:w="3069556"/><text x="92.7027%" y="655.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (11,802,186 samples, 4.05%)</title><rect x="90.5448%" y="741" width="4.0496%" height="15" fill="rgb(227,165,31)" fg:x="263882623" fg:w="11802186"/><text x="90.7948%" y="751.50">std:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11,802,186 samples, 4.05%)</title><rect x="90.5448%" y="725" width="4.0496%" height="15" fill="rgb(228,167,24)" fg:x="263882623" fg:w="11802186"/><text x="90.7948%" y="735.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (11,802,186 samples, 4.05%)</title><rect x="90.5448%" y="709" width="4.0496%" height="15" fill="rgb(228,143,12)" fg:x="263882623" fg:w="11802186"/><text x="90.7948%" y="719.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (6,241,840 samples, 2.14%)</title><rect x="92.4527%" y="693" width="2.1417%" height="15" fill="rgb(249,149,8)" fg:x="269442969" fg:w="6241840"/><text x="92.7027%" y="703.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3,172,284 samples, 1.09%)</title><rect x="93.5060%" y="677" width="1.0885%" height="15" fill="rgb(243,35,44)" fg:x="272512525" fg:w="3172284"/><text x="93.7560%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3,172,284 samples, 1.09%)</title><rect x="93.5060%" y="661" width="1.0885%" height="15" fill="rgb(246,89,9)" fg:x="272512525" fg:w="3172284"/><text x="93.7560%" y="671.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (3,166,356 samples, 1.09%)</title><rect x="94.5945%" y="725" width="1.0865%" height="15" fill="rgb(233,213,13)" fg:x="275684809" fg:w="3166356"/><text x="94.8445%" y="735.50"></text></g><g><title>std::sync::poison::Flag::guard (3,166,356 samples, 1.09%)</title><rect x="94.5945%" y="709" width="1.0865%" height="15" fill="rgb(233,141,41)" fg:x="275684809" fg:w="3166356"/><text x="94.8445%" y="719.50"></text></g><g><title>std::thread::panicking (3,166,356 samples, 1.09%)</title><rect x="94.5945%" y="693" width="1.0865%" height="15" fill="rgb(239,167,4)" fg:x="275684809" fg:w="3166356"/><text x="94.8445%" y="703.50"></text></g><g><title>std::panicking::panicking (3,166,356 samples, 1.09%)</title><rect x="94.5945%" y="677" width="1.0865%" height="15" fill="rgb(209,217,16)" fg:x="275684809" fg:w="3166356"/><text x="94.8445%" y="687.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (3,166,356 samples, 1.09%)</title><rect x="94.5945%" y="661" width="1.0865%" height="15" fill="rgb(219,88,35)" fg:x="275684809" fg:w="3166356"/><text x="94.8445%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3,166,356 samples, 1.09%)</title><rect x="94.5945%" y="645" width="1.0865%" height="15" fill="rgb(220,193,23)" fg:x="275684809" fg:w="3166356"/><text x="94.8445%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_load (3,166,356 samples, 1.09%)</title><rect x="94.5945%" y="629" width="1.0865%" height="15" fill="rgb(230,90,52)" fg:x="275684809" fg:w="3166356"/><text x="94.8445%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (4,556,160 samples, 1.56%)</title><rect x="94.5945%" y="741" width="1.5633%" height="15" fill="rgb(252,106,19)" fg:x="275684809" fg:w="4556160"/><text x="94.8445%" y="751.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1,389,804 samples, 0.48%)</title><rect x="95.6809%" y="725" width="0.4769%" height="15" fill="rgb(206,74,20)" fg:x="278851165" fg:w="1389804"/><text x="95.9309%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (1,389,804 samples, 0.48%)</title><rect x="95.6809%" y="709" width="0.4769%" height="15" fill="rgb(230,138,44)" fg:x="278851165" fg:w="1389804"/><text x="95.9309%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (1,389,804 samples, 0.48%)</title><rect x="95.6809%" y="693" width="0.4769%" height="15" fill="rgb(235,182,43)" fg:x="278851165" fg:w="1389804"/><text x="95.9309%" y="703.50"></text></g><g><title>thousands_of_up (283,362,674 samples, 97.23%)</title><rect x="0.0000%" y="1189" width="97.2289%" height="15" fill="rgb(242,16,51)" fg:x="0" fg:w="283362674"/><text x="0.2500%" y="1199.50">thousands_of_up</text></g><g><title>[libc.so.6] (283,362,674 samples, 97.23%)</title><rect x="0.0000%" y="1173" width="97.2289%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="283362674"/><text x="0.2500%" y="1183.50">[libc.so.6]</text></g><g><title>[libc.so.6] (283,362,674 samples, 97.23%)</title><rect x="0.0000%" y="1157" width="97.2289%" height="15" fill="rgb(210,31,22)" fg:x="0" fg:w="283362674"/><text x="0.2500%" y="1167.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="1141" width="96.4083%" height="15" fill="rgb(239,54,39)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="1151.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="1125" width="96.4083%" height="15" fill="rgb(230,99,41)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="1135.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="1109" width="96.4083%" height="15" fill="rgb(253,106,12)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="1119.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="1093" width="96.4083%" height="15" fill="rgb(213,46,41)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="1103.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="1077" width="96.4083%" height="15" fill="rgb(215,133,35)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="1087.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="1061" width="96.4083%" height="15" fill="rgb(213,28,5)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="1071.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="1045" width="96.4083%" height="15" fill="rgb(215,77,49)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="1055.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="1029" width="96.4083%" height="15" fill="rgb(248,100,22)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="1039.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="1013" width="96.4083%" height="15" fill="rgb(208,67,9)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="1023.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="997" width="96.4083%" height="15" fill="rgb(219,133,21)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="1007.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="981" width="96.4083%" height="15" fill="rgb(246,46,29)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="991.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::_{{closure}} (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="965" width="96.4083%" height="15" fill="rgb(246,185,52)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="975.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test::_{{closure}} (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="949" width="96.4083%" height="15" fill="rgb(252,136,11)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="959.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test_in_process (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="933" width="96.4083%" height="15" fill="rgb(219,138,53)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="943.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="917" width="96.4083%" height="15" fill="rgb(211,51,23)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="901" width="96.4083%" height="15" fill="rgb(247,221,28)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="885" width="96.4083%" height="15" fill="rgb(251,222,45)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="895.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="869" width="96.4083%" height="15" fill="rgb(217,162,53)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="879.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>test::run_test_in_process::_{{closure}} (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="853" width="96.4083%" height="15" fill="rgb(229,93,14)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="863.50">test::run_test_in_process::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="837" width="96.4083%" height="15" fill="rgb(209,67,49)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="847.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="821" width="96.4083%" height="15" fill="rgb(213,87,29)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="831.50">core::ops::function::FnOnce::call_once</text></g><g><title>core::ops::function::FnOnce::call_once (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="805" width="96.4083%" height="15" fill="rgb(205,151,52)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="815.50">core::ops::function::FnOnce::call_once</text></g><g><title>update_tests::thousands_of_updates_test::_{{closure}} (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="789" width="96.4083%" height="15" fill="rgb(253,215,39)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="799.50">update_tests::thousands_of_updates_test::_{{closure}}</text></g><g><title>update_tests::thousands_of_updates_test (280,971,029 samples, 96.41%)</title><rect x="0.8206%" y="773" width="96.4083%" height="15" fill="rgb(221,220,41)" fg:x="2391645" fg:w="280971029"/><text x="1.0706%" y="783.50">update_tests::thousands_of_updates_test</text></g><g><title>redoxql::query::RQuery::update (196,875,597 samples, 67.55%)</title><rect x="29.6759%" y="757" width="67.5530%" height="15" fill="rgb(218,133,21)" fg:x="86487077" fg:w="196875597"/><text x="29.9259%" y="767.50">redoxql::query::RQuery::update</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (3,121,705 samples, 1.07%)</title><rect x="96.1578%" y="741" width="1.0711%" height="15" fill="rgb(221,193,43)" fg:x="280240969" fg:w="3121705"/><text x="96.4078%" y="751.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::read (3,121,705 samples, 1.07%)</title><rect x="96.1578%" y="725" width="1.0711%" height="15" fill="rgb(240,128,52)" fg:x="280240969" fg:w="3121705"/><text x="96.4078%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (3,121,705 samples, 1.07%)</title><rect x="96.1578%" y="709" width="1.0711%" height="15" fill="rgb(253,114,12)" fg:x="280240969" fg:w="3121705"/><text x="96.4078%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (3,121,705 samples, 1.07%)</title><rect x="96.1578%" y="693" width="1.0711%" height="15" fill="rgb(215,223,47)" fg:x="280240969" fg:w="3121705"/><text x="96.4078%" y="703.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3,147,369 samples, 1.08%)</title><rect x="97.2289%" y="1093" width="1.0799%" height="15" fill="rgb(248,225,23)" fg:x="283362674" fg:w="3147369"/><text x="97.4789%" y="1103.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,704,554 samples, 1.61%)</title><rect x="97.2289%" y="1125" width="1.6143%" height="15" fill="rgb(250,108,0)" fg:x="283362674" fg:w="4704554"/><text x="97.4789%" y="1135.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,704,554 samples, 1.61%)</title><rect x="97.2289%" y="1109" width="1.6143%" height="15" fill="rgb(228,208,7)" fg:x="283362674" fg:w="4704554"/><text x="97.4789%" y="1119.50"></text></g><g><title>_dl_catch_exception (1,557,185 samples, 0.53%)</title><rect x="98.3089%" y="1093" width="0.5343%" height="15" fill="rgb(244,45,10)" fg:x="286510043" fg:w="1557185"/><text x="98.5589%" y="1103.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,557,185 samples, 0.53%)</title><rect x="98.3089%" y="1077" width="0.5343%" height="15" fill="rgb(207,125,25)" fg:x="286510043" fg:w="1557185"/><text x="98.5589%" y="1087.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,557,185 samples, 0.53%)</title><rect x="98.3089%" y="1061" width="0.5343%" height="15" fill="rgb(210,195,18)" fg:x="286510043" fg:w="1557185"/><text x="98.5589%" y="1071.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,557,185 samples, 0.53%)</title><rect x="98.3089%" y="1045" width="0.5343%" height="15" fill="rgb(249,80,12)" fg:x="286510043" fg:w="1557185"/><text x="98.5589%" y="1055.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1,557,185 samples, 0.53%)</title><rect x="98.3089%" y="1029" width="0.5343%" height="15" fill="rgb(221,65,9)" fg:x="286510043" fg:w="1557185"/><text x="98.5589%" y="1039.50"></text></g><g><title>[unknown] (1,557,185 samples, 0.53%)</title><rect x="98.3089%" y="1013" width="0.5343%" height="15" fill="rgb(235,49,36)" fg:x="286510043" fg:w="1557185"/><text x="98.5589%" y="1023.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,808,155 samples, 1.65%)</title><rect x="97.2289%" y="1141" width="1.6498%" height="15" fill="rgb(225,32,20)" fg:x="283362674" fg:w="4808155"/><text x="97.4789%" y="1151.50"></text></g><g><title>[unknown] (103,601 samples, 0.04%)</title><rect x="98.8432%" y="1125" width="0.0355%" height="15" fill="rgb(215,141,46)" fg:x="288067228" fg:w="103601"/><text x="99.0932%" y="1135.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,812,208 samples, 1.65%)</title><rect x="97.2289%" y="1157" width="1.6512%" height="15" fill="rgb(250,160,47)" fg:x="283362674" fg:w="4812208"/><text x="97.4789%" y="1167.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4,812,210 samples, 1.65%)</title><rect x="97.2289%" y="1173" width="1.6512%" height="15" fill="rgb(216,222,40)" fg:x="283362674" fg:w="4812210"/><text x="97.4789%" y="1183.50"></text></g><g><title>[libc.so.6] (378,368 samples, 0.13%)</title><rect x="98.8801%" y="1173" width="0.1298%" height="15" fill="rgb(234,217,39)" fg:x="288174884" fg:w="378368"/><text x="99.1301%" y="1183.50"></text></g><g><title>[libc.so.6] (378,368 samples, 0.13%)</title><rect x="98.8801%" y="1157" width="0.1298%" height="15" fill="rgb(207,178,40)" fg:x="288174884" fg:w="378368"/><text x="99.1301%" y="1167.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (366,108 samples, 0.13%)</title><rect x="98.8843%" y="1141" width="0.1256%" height="15" fill="rgb(221,136,13)" fg:x="288187144" fg:w="366108"/><text x="99.1343%" y="1151.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (366,108 samples, 0.13%)</title><rect x="98.8843%" y="1125" width="0.1256%" height="15" fill="rgb(249,199,10)" fg:x="288187144" fg:w="366108"/><text x="99.1343%" y="1135.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (366,108 samples, 0.13%)</title><rect x="98.8843%" y="1109" width="0.1256%" height="15" fill="rgb(249,222,13)" fg:x="288187144" fg:w="366108"/><text x="99.1343%" y="1119.50"></text></g><g><title>sigaltstack (366,108 samples, 0.13%)</title><rect x="98.8843%" y="1093" width="0.1256%" height="15" fill="rgb(244,185,38)" fg:x="288187144" fg:w="366108"/><text x="99.1343%" y="1103.50"></text></g><g><title>[unknown] (366,108 samples, 0.13%)</title><rect x="98.8843%" y="1077" width="0.1256%" height="15" fill="rgb(236,202,9)" fg:x="288187144" fg:w="366108"/><text x="99.1343%" y="1087.50"></text></g><g><title>[unknown] (366,108 samples, 0.13%)</title><rect x="98.8843%" y="1061" width="0.1256%" height="15" fill="rgb(250,229,37)" fg:x="288187144" fg:w="366108"/><text x="99.1343%" y="1071.50"></text></g><g><title>[unknown] (366,108 samples, 0.13%)</title><rect x="98.8843%" y="1045" width="0.1256%" height="15" fill="rgb(206,174,23)" fg:x="288187144" fg:w="366108"/><text x="99.1343%" y="1055.50"></text></g><g><title>[unknown] (366,108 samples, 0.13%)</title><rect x="98.8843%" y="1029" width="0.1256%" height="15" fill="rgb(211,33,43)" fg:x="288187144" fg:w="366108"/><text x="99.1343%" y="1039.50"></text></g><g><title>exit (2,666,425 samples, 0.91%)</title><rect x="99.0099%" y="1125" width="0.9149%" height="15" fill="rgb(245,58,50)" fg:x="288553253" fg:w="2666425"/><text x="99.2599%" y="1135.50"></text></g><g><title>[libc.so.6] (2,666,425 samples, 0.91%)</title><rect x="99.0099%" y="1109" width="0.9149%" height="15" fill="rgb(244,68,36)" fg:x="288553253" fg:w="2666425"/><text x="99.2599%" y="1119.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2,666,425 samples, 0.91%)</title><rect x="99.0099%" y="1093" width="0.9149%" height="15" fill="rgb(232,229,15)" fg:x="288553253" fg:w="2666425"/><text x="99.2599%" y="1103.50"></text></g><g><title>[libpython3.12.so.1.0] (2,666,425 samples, 0.91%)</title><rect x="99.0099%" y="1077" width="0.9149%" height="15" fill="rgb(254,30,23)" fg:x="288553253" fg:w="2666425"/><text x="99.2599%" y="1087.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (211,012 samples, 0.07%)</title><rect x="99.9249%" y="853" width="0.0724%" height="15" fill="rgb(235,160,14)" fg:x="291219678" fg:w="211012"/><text x="100.1749%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (211,012 samples, 0.07%)</title><rect x="99.9249%" y="837" width="0.0724%" height="15" fill="rgb(212,155,44)" fg:x="291219678" fg:w="211012"/><text x="100.1749%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (211,012 samples, 0.07%)</title><rect x="99.9249%" y="821" width="0.0724%" height="15" fill="rgb(226,2,50)" fg:x="291219678" fg:w="211012"/><text x="100.1749%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (211,012 samples, 0.07%)</title><rect x="99.9249%" y="805" width="0.0724%" height="15" fill="rgb(234,177,6)" fg:x="291219678" fg:w="211012"/><text x="100.1749%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (211,012 samples, 0.07%)</title><rect x="99.9249%" y="789" width="0.0724%" height="15" fill="rgb(217,24,9)" fg:x="291219678" fg:w="211012"/><text x="100.1749%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (211,012 samples, 0.07%)</title><rect x="99.9249%" y="773" width="0.0724%" height="15" fill="rgb(220,13,46)" fg:x="291219678" fg:w="211012"/><text x="100.1749%" y="783.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (211,012 samples, 0.07%)</title><rect x="99.9249%" y="757" width="0.0724%" height="15" fill="rgb(239,221,27)" fg:x="291219678" fg:w="211012"/><text x="100.1749%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (211,012 samples, 0.07%)</title><rect x="99.9249%" y="741" width="0.0724%" height="15" fill="rgb(222,198,25)" fg:x="291219678" fg:w="211012"/><text x="100.1749%" y="751.50"></text></g><g><title>all (291,438,668 samples, 100%)</title><rect x="0.0000%" y="1205" width="100.0000%" height="15" fill="rgb(211,99,13)" fg:x="0" fg:w="291438668"/><text x="0.2500%" y="1215.50"></text></g><g><title>update_tests-a3 (8,075,994 samples, 2.77%)</title><rect x="97.2289%" y="1189" width="2.7711%" height="15" fill="rgb(232,111,31)" fg:x="283362674" fg:w="8075994"/><text x="97.4789%" y="1199.50">up..</text></g><g><title>_start (2,885,415 samples, 0.99%)</title><rect x="99.0099%" y="1173" width="0.9901%" height="15" fill="rgb(245,82,37)" fg:x="288553253" fg:w="2885415"/><text x="99.2599%" y="1183.50"></text></g><g><title>__libc_start_main (2,885,415 samples, 0.99%)</title><rect x="99.0099%" y="1157" width="0.9901%" height="15" fill="rgb(227,149,46)" fg:x="288553253" fg:w="2885415"/><text x="99.2599%" y="1167.50"></text></g><g><title>[libc.so.6] (2,885,415 samples, 0.99%)</title><rect x="99.0099%" y="1141" width="0.9901%" height="15" fill="rgb(218,36,50)" fg:x="288553253" fg:w="2885415"/><text x="99.2599%" y="1151.50"></text></g><g><title>main (218,990 samples, 0.08%)</title><rect x="99.9249%" y="1125" width="0.0751%" height="15" fill="rgb(226,80,48)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="1135.50"></text></g><g><title>std::rt::lang_start_internal (218,990 samples, 0.08%)</title><rect x="99.9249%" y="1109" width="0.0751%" height="15" fill="rgb(238,224,15)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="1119.50"></text></g><g><title>std::panic::catch_unwind (218,990 samples, 0.08%)</title><rect x="99.9249%" y="1093" width="0.0751%" height="15" fill="rgb(241,136,10)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="1103.50"></text></g><g><title>std::panicking::try (218,990 samples, 0.08%)</title><rect x="99.9249%" y="1077" width="0.0751%" height="15" fill="rgb(208,32,45)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="1087.50"></text></g><g><title>std::panicking::try::do_call (218,990 samples, 0.08%)</title><rect x="99.9249%" y="1061" width="0.0751%" height="15" fill="rgb(207,135,9)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="1071.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (218,990 samples, 0.08%)</title><rect x="99.9249%" y="1045" width="0.0751%" height="15" fill="rgb(206,86,44)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="1055.50"></text></g><g><title>std::panic::catch_unwind (218,990 samples, 0.08%)</title><rect x="99.9249%" y="1029" width="0.0751%" height="15" fill="rgb(245,177,15)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="1039.50"></text></g><g><title>std::panicking::try (218,990 samples, 0.08%)</title><rect x="99.9249%" y="1013" width="0.0751%" height="15" fill="rgb(206,64,50)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="1023.50"></text></g><g><title>std::panicking::try::do_call (218,990 samples, 0.08%)</title><rect x="99.9249%" y="997" width="0.0751%" height="15" fill="rgb(234,36,40)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="1007.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (218,990 samples, 0.08%)</title><rect x="99.9249%" y="981" width="0.0751%" height="15" fill="rgb(213,64,8)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="991.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (218,990 samples, 0.08%)</title><rect x="99.9249%" y="965" width="0.0751%" height="15" fill="rgb(210,75,36)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="975.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (218,990 samples, 0.08%)</title><rect x="99.9249%" y="949" width="0.0751%" height="15" fill="rgb(229,88,21)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="959.50"></text></g><g><title>core::ops::function::FnOnce::call_once (218,990 samples, 0.08%)</title><rect x="99.9249%" y="933" width="0.0751%" height="15" fill="rgb(252,204,47)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="943.50"></text></g><g><title>test::test_main_static (218,990 samples, 0.08%)</title><rect x="99.9249%" y="917" width="0.0751%" height="15" fill="rgb(208,77,27)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="927.50"></text></g><g><title>test::test_main (218,990 samples, 0.08%)</title><rect x="99.9249%" y="901" width="0.0751%" height="15" fill="rgb(221,76,26)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="911.50"></text></g><g><title>test::console::run_tests_console (218,990 samples, 0.08%)</title><rect x="99.9249%" y="885" width="0.0751%" height="15" fill="rgb(225,139,18)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="895.50"></text></g><g><title>test::run_tests (218,990 samples, 0.08%)</title><rect x="99.9249%" y="869" width="0.0751%" height="15" fill="rgb(230,137,11)" fg:x="291219678" fg:w="218990"/><text x="100.1749%" y="879.50"></text></g></svg></svg>