<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1254" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1237.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1237.00"> </text><svg id="frames" x="10" width="1180" total_samples="349067771"><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (39,496,847 samples, 11.31%)</title><rect x="14.8508%" y="245" width="11.3150%" height="15" fill="rgb(227,0,7)" fg:x="51839191" fg:w="39496847"/><text x="15.1008%" y="255.50">alloc::sync::Arc&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;redoxql::page::PhysicalPage&gt;&gt; (39,496,847 samples, 11.31%)</title><rect x="14.8508%" y="229" width="11.3150%" height="15" fill="rgb(217,0,24)" fg:x="51839191" fg:w="39496847"/><text x="15.1008%" y="239.50">core::ptr::drop_i..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;redoxql::page::PhysicalPage&gt;&gt; (39,496,847 samples, 11.31%)</title><rect x="14.8508%" y="213" width="11.3150%" height="15" fill="rgb(221,193,54)" fg:x="51839191" fg:w="39496847"/><text x="15.1008%" y="223.50">core::ptr::drop_i..</text></g><g><title>core::ptr::drop_in_place&lt;redoxql::page::PhysicalPage&gt; (39,496,847 samples, 11.31%)</title><rect x="14.8508%" y="197" width="11.3150%" height="15" fill="rgb(248,212,6)" fg:x="51839191" fg:w="39496847"/><text x="15.1008%" y="207.50">core::ptr::drop_i..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i64&gt;&gt; (39,496,847 samples, 11.31%)</title><rect x="14.8508%" y="181" width="11.3150%" height="15" fill="rgb(208,68,35)" fg:x="51839191" fg:w="39496847"/><text x="15.1008%" y="191.50">core::ptr::drop_i..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i64&gt;&gt; (39,496,847 samples, 11.31%)</title><rect x="14.8508%" y="165" width="11.3150%" height="15" fill="rgb(232,128,0)" fg:x="51839191" fg:w="39496847"/><text x="15.1008%" y="175.50">core::ptr::drop_i..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39,496,847 samples, 11.31%)</title><rect x="14.8508%" y="149" width="11.3150%" height="15" fill="rgb(207,160,47)" fg:x="51839191" fg:w="39496847"/><text x="15.1008%" y="159.50">&lt;alloc::raw_vec::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (39,496,847 samples, 11.31%)</title><rect x="14.8508%" y="133" width="11.3150%" height="15" fill="rgb(228,23,34)" fg:x="51839191" fg:w="39496847"/><text x="15.1008%" y="143.50">&lt;alloc::alloc::Gl..</text></g><g><title>alloc::alloc::dealloc (39,496,847 samples, 11.31%)</title><rect x="14.8508%" y="117" width="11.3150%" height="15" fill="rgb(218,30,26)" fg:x="51839191" fg:w="39496847"/><text x="15.1008%" y="127.50">alloc::alloc::dea..</text></g><g><title>cfree (39,496,847 samples, 11.31%)</title><rect x="14.8508%" y="101" width="11.3150%" height="15" fill="rgb(220,122,19)" fg:x="51839191" fg:w="39496847"/><text x="15.1008%" y="111.50">cfree</text></g><g><title>[libc.so.6] (39,496,847 samples, 11.31%)</title><rect x="14.8508%" y="85" width="11.3150%" height="15" fill="rgb(250,228,42)" fg:x="51839191" fg:w="39496847"/><text x="15.1008%" y="95.50">[libc.so.6]</text></g><g><title>[libc.so.6] (39,496,847 samples, 11.31%)</title><rect x="14.8508%" y="69" width="11.3150%" height="15" fill="rgb(240,193,28)" fg:x="51839191" fg:w="39496847"/><text x="15.1008%" y="79.50">[libc.so.6]</text></g><g><title>[libc.so.6] (39,496,847 samples, 11.31%)</title><rect x="14.8508%" y="53" width="11.3150%" height="15" fill="rgb(216,20,37)" fg:x="51839191" fg:w="39496847"/><text x="15.1008%" y="63.50">[libc.so.6]</text></g><g><title>[libc.so.6] (35,097,220 samples, 10.05%)</title><rect x="16.1111%" y="37" width="10.0546%" height="15" fill="rgb(206,188,39)" fg:x="56238818" fg:w="35097220"/><text x="16.3611%" y="47.50">[libc.so.6]</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (75,428,900 samples, 21.61%)</title><rect x="11.6193%" y="325" width="21.6087%" height="15" fill="rgb(217,207,13)" fg:x="40559381" fg:w="75428900"/><text x="11.8693%" y="335.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops..</text></g><g><title>core::ptr::drop_in_place&lt;[redoxql::record::RecordAddress]&gt; (75,428,900 samples, 21.61%)</title><rect x="11.6193%" y="309" width="21.6087%" height="15" fill="rgb(231,73,38)" fg:x="40559381" fg:w="75428900"/><text x="11.8693%" y="319.50">core::ptr::drop_in_place&lt;[redoxql:..</text></g><g><title>core::ptr::drop_in_place&lt;redoxql::record::RecordAddress&gt; (67,972,163 samples, 19.47%)</title><rect x="13.7555%" y="293" width="19.4725%" height="15" fill="rgb(225,20,46)" fg:x="48016118" fg:w="67972163"/><text x="14.0055%" y="303.50">core::ptr::drop_in_place&lt;redoxq..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;redoxql::page::PhysicalPage&gt;&gt;&gt; (67,972,163 samples, 19.47%)</title><rect x="13.7555%" y="277" width="19.4725%" height="15" fill="rgb(210,31,41)" fg:x="48016118" fg:w="67972163"/><text x="14.0055%" y="287.50">core::ptr::drop_in_place&lt;alloc:..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (67,972,163 samples, 19.47%)</title><rect x="13.7555%" y="261" width="19.4725%" height="15" fill="rgb(221,200,47)" fg:x="48016118" fg:w="67972163"/><text x="14.0055%" y="271.50">&lt;alloc::sync::Arc&lt;T,A&gt; as core:..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (24,652,243 samples, 7.06%)</title><rect x="26.1657%" y="245" width="7.0623%" height="15" fill="rgb(226,26,5)" fg:x="91336038" fg:w="24652243"/><text x="26.4157%" y="255.50">core::syn..</text></g><g><title>core::sync::atomic::atomic_sub (24,652,243 samples, 7.06%)</title><rect x="26.1657%" y="229" width="7.0623%" height="15" fill="rgb(249,33,26)" fg:x="91336038" fg:w="24652243"/><text x="26.4157%" y="239.50">core::syn..</text></g><g><title>core::ptr::drop_in_place&lt;redoxql::database::RDatabase&gt; (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="757" width="35.4998%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="767.50">core::ptr::drop_in_place&lt;redoxql::database::RDatabase&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;std::sync::rwlock::RwLock&lt;redoxql::table::RTable&gt;&gt;&gt;&gt; (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="741" width="35.4998%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="751.50">core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="725" width="35.4998%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="735.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::sync::Arc&lt;std::sync::rwlock::RwLock&lt;redoxql::table::RTable&gt;&gt;]&gt; (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="709" width="35.4998%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="719.50">core::ptr::drop_in_place&lt;[alloc::sync::Arc&lt;std::sync::rwlo..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::rwlock::RwLock&lt;redoxql::table::RTable&gt;&gt;&gt; (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="693" width="35.4998%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="703.50">core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::rwloc..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="677" width="35.4998%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="687.50">&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="661" width="35.4998%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="671.50">alloc::sync::Arc&lt;T,A&gt;::drop_slow</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLock&lt;redoxql::table::RTable&gt;&gt; (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="645" width="35.4998%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="655.50">core::ptr::drop_in_place&lt;std::sync::rwlock::RwLock&lt;redoxql..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;redoxql::table::RTable&gt;&gt; (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="629" width="35.4998%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="639.50">core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;redoxql::t..</text></g><g><title>core::ptr::drop_in_place&lt;redoxql::table::RTable&gt; (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="613" width="35.4998%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="623.50">core::ptr::drop_in_place&lt;redoxql::table::RTable&gt;</text></g><g><title>core::ptr::drop_in_place&lt;redoxql::table::PageDirectory&gt; (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="597" width="35.4998%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="607.50">core::ptr::drop_in_place&lt;redoxql::table::PageDirectory&gt;</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;i64,redoxql::record::Record&gt;&gt; (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="581" width="35.4998%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="591.50">core::ptr::drop_in_place&lt;std::collections::hash::map::Hash..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;i64,redoxql::record::Record,std::hash::random::RandomState&gt;&gt; (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="565" width="35.4998%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="575.50">core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;i64,redox..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(i64,redoxql::record::Record)&gt;&gt; (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="549" width="35.4998%" height="15" fill="rgb(241,83,37)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="559.50">core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(i64,red..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="533" width="35.4998%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="543.50">&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::..</text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="517" width="35.4998%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="527.50">hashbrown::raw::RawTableInner::drop_inner_table</text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="501" width="35.4998%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="511.50">hashbrown::raw::RawTableInner::drop_elements</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="485" width="35.4998%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="495.50">hashbrown::raw::Bucket&lt;T&gt;::drop</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="469" width="35.4998%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="479.50">core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place</text></g><g><title>core::ptr::drop_in_place&lt;(i64,redoxql::record::Record)&gt; (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="453" width="35.4998%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="463.50">core::ptr::drop_in_place&lt;(i64,redoxql::record::Record)&gt;</text></g><g><title>core::ptr::drop_in_place&lt;redoxql::record::Record&gt; (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="437" width="35.4998%" height="15" fill="rgb(208,69,12)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="447.50">core::ptr::drop_in_place&lt;redoxql::record::Record&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;redoxql::record::RecordAddress&gt;&gt;&gt;&gt; (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="421" width="35.4998%" height="15" fill="rgb(235,93,37)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="431.50">core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (123,918,350 samples, 35.50%)</title><rect x="0.0000%" y="405" width="35.4998%" height="15" fill="rgb(213,116,39)" fg:x="0" fg:w="123918350"/><text x="0.2500%" y="415.50">&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (83,358,969 samples, 23.88%)</title><rect x="11.6193%" y="389" width="23.8805%" height="15" fill="rgb(222,207,29)" fg:x="40559381" fg:w="83358969"/><text x="11.8693%" y="399.50">alloc::sync::Arc&lt;T,A&gt;::drop_slow</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::Mutex&lt;alloc::vec::Vec&lt;redoxql::record::RecordAddress&gt;&gt;&gt; (83,358,969 samples, 23.88%)</title><rect x="11.6193%" y="373" width="23.8805%" height="15" fill="rgb(206,96,30)" fg:x="40559381" fg:w="83358969"/><text x="11.8693%" y="383.50">core::ptr::drop_in_place&lt;std::sync::mu..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;alloc::vec::Vec&lt;redoxql::record::RecordAddress&gt;&gt;&gt; (83,358,969 samples, 23.88%)</title><rect x="11.6193%" y="357" width="23.8805%" height="15" fill="rgb(218,138,4)" fg:x="40559381" fg:w="83358969"/><text x="11.8693%" y="367.50">core::ptr::drop_in_place&lt;core::cell::U..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;redoxql::record::RecordAddress&gt;&gt; (83,358,969 samples, 23.88%)</title><rect x="11.6193%" y="341" width="23.8805%" height="15" fill="rgb(250,191,14)" fg:x="40559381" fg:w="83358969"/><text x="11.8693%" y="351.50">core::ptr::drop_in_place&lt;alloc::vec::V..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;redoxql::record::RecordAddress&gt;&gt; (7,930,069 samples, 2.27%)</title><rect x="33.2280%" y="325" width="2.2718%" height="15" fill="rgb(239,60,40)" fg:x="115988281" fg:w="7930069"/><text x="33.4780%" y="335.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,930,069 samples, 2.27%)</title><rect x="33.2280%" y="309" width="2.2718%" height="15" fill="rgb(206,27,48)" fg:x="115988281" fg:w="7930069"/><text x="33.4780%" y="319.50">&lt;..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7,930,069 samples, 2.27%)</title><rect x="33.2280%" y="293" width="2.2718%" height="15" fill="rgb(225,35,8)" fg:x="115988281" fg:w="7930069"/><text x="33.4780%" y="303.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (7,930,069 samples, 2.27%)</title><rect x="33.2280%" y="277" width="2.2718%" height="15" fill="rgb(250,213,24)" fg:x="115988281" fg:w="7930069"/><text x="33.4780%" y="287.50">a..</text></g><g><title>cfree (7,930,069 samples, 2.27%)</title><rect x="33.2280%" y="261" width="2.2718%" height="15" fill="rgb(247,123,22)" fg:x="115988281" fg:w="7930069"/><text x="33.4780%" y="271.50">c..</text></g><g><title>[libc.so.6] (7,930,069 samples, 2.27%)</title><rect x="33.2280%" y="245" width="2.2718%" height="15" fill="rgb(231,138,38)" fg:x="115988281" fg:w="7930069"/><text x="33.4780%" y="255.50">[..</text></g><g><title>[libc.so.6] (7,930,069 samples, 2.27%)</title><rect x="33.2280%" y="229" width="2.2718%" height="15" fill="rgb(231,145,46)" fg:x="115988281" fg:w="7930069"/><text x="33.4780%" y="239.50">[..</text></g><g><title>[libc.so.6] (4,326,043 samples, 1.24%)</title><rect x="34.2605%" y="213" width="1.2393%" height="15" fill="rgb(251,118,11)" fg:x="119592307" fg:w="4326043"/><text x="34.5105%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;i64&gt;&gt;&gt; (3,386,561 samples, 0.97%)</title><rect x="35.5009%" y="741" width="0.9702%" height="15" fill="rgb(217,147,25)" fg:x="123922163" fg:w="3386561"/><text x="35.7509%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;i64&gt;&gt;&gt; (3,386,561 samples, 0.97%)</title><rect x="35.5009%" y="725" width="0.9702%" height="15" fill="rgb(247,81,37)" fg:x="123922163" fg:w="3386561"/><text x="35.7509%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,386,561 samples, 0.97%)</title><rect x="35.5009%" y="709" width="0.9702%" height="15" fill="rgb(209,12,38)" fg:x="123922163" fg:w="3386561"/><text x="35.7509%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,386,561 samples, 0.97%)</title><rect x="35.5009%" y="693" width="0.9702%" height="15" fill="rgb(227,1,9)" fg:x="123922163" fg:w="3386561"/><text x="35.7509%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (3,386,561 samples, 0.97%)</title><rect x="35.5009%" y="677" width="0.9702%" height="15" fill="rgb(248,47,43)" fg:x="123922163" fg:w="3386561"/><text x="35.7509%" y="687.50"></text></g><g><title>cfree (3,386,561 samples, 0.97%)</title><rect x="35.5009%" y="661" width="0.9702%" height="15" fill="rgb(221,10,30)" fg:x="123922163" fg:w="3386561"/><text x="35.7509%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;redoxql::page::PhysicalPage&gt;&gt; (12,425,352 samples, 3.56%)</title><rect x="36.4711%" y="741" width="3.5596%" height="15" fill="rgb(210,229,1)" fg:x="127308724" fg:w="12425352"/><text x="36.7211%" y="751.50">core..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12,425,352 samples, 3.56%)</title><rect x="36.4711%" y="725" width="3.5596%" height="15" fill="rgb(222,148,37)" fg:x="127308724" fg:w="12425352"/><text x="36.7211%" y="735.50">&lt;std..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (12,425,352 samples, 3.56%)</title><rect x="36.4711%" y="709" width="3.5596%" height="15" fill="rgb(234,67,33)" fg:x="127308724" fg:w="12425352"/><text x="36.7211%" y="719.50">std:..</text></g><g><title>core::sync::atomic::AtomicU32::swap (12,425,352 samples, 3.56%)</title><rect x="36.4711%" y="693" width="3.5596%" height="15" fill="rgb(247,98,35)" fg:x="127308724" fg:w="12425352"/><text x="36.7211%" y="703.50">core..</text></g><g><title>core::sync::atomic::atomic_swap (12,425,352 samples, 3.56%)</title><rect x="36.4711%" y="677" width="3.5596%" height="15" fill="rgb(247,138,52)" fg:x="127308724" fg:w="12425352"/><text x="36.7211%" y="687.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockWriteGuard&lt;redoxql::table::RTable&gt;&gt; (3,014,427 samples, 0.86%)</title><rect x="40.0306%" y="741" width="0.8636%" height="15" fill="rgb(213,79,30)" fg:x="139734076" fg:w="3014427"/><text x="40.2806%" y="751.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockWriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,014,427 samples, 0.86%)</title><rect x="40.0306%" y="725" width="0.8636%" height="15" fill="rgb(246,177,23)" fg:x="139734076" fg:w="3014427"/><text x="40.2806%" y="735.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::write_unlock (3,014,427 samples, 0.86%)</title><rect x="40.0306%" y="709" width="0.8636%" height="15" fill="rgb(230,62,27)" fg:x="139734076" fg:w="3014427"/><text x="40.2806%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (9,248,155 samples, 2.65%)</title><rect x="40.8949%" y="725" width="2.6494%" height="15" fill="rgb(216,154,8)" fg:x="142750998" fg:w="9248155"/><text x="41.1449%" y="735.50">&lt;a..</text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (6,367,220 samples, 1.82%)</title><rect x="43.5443%" y="725" width="1.8241%" height="15" fill="rgb(244,35,45)" fg:x="151999153" fg:w="6367220"/><text x="43.7943%" y="735.50">a..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (6,367,220 samples, 1.82%)</title><rect x="43.5443%" y="709" width="1.8241%" height="15" fill="rgb(251,115,12)" fg:x="151999153" fg:w="6367220"/><text x="43.7943%" y="719.50">a..</text></g><g><title>alloc::alloc::exchange_malloc (6,367,220 samples, 1.82%)</title><rect x="43.5443%" y="693" width="1.8241%" height="15" fill="rgb(240,54,50)" fg:x="151999153" fg:w="6367220"/><text x="43.7943%" y="703.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6,367,220 samples, 1.82%)</title><rect x="43.5443%" y="677" width="1.8241%" height="15" fill="rgb(233,84,52)" fg:x="151999153" fg:w="6367220"/><text x="43.7943%" y="687.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (6,367,220 samples, 1.82%)</title><rect x="43.5443%" y="661" width="1.8241%" height="15" fill="rgb(207,117,47)" fg:x="151999153" fg:w="6367220"/><text x="43.7943%" y="671.50">a..</text></g><g><title>alloc::alloc::alloc (6,367,220 samples, 1.82%)</title><rect x="43.5443%" y="645" width="1.8241%" height="15" fill="rgb(249,43,39)" fg:x="151999153" fg:w="6367220"/><text x="43.7943%" y="655.50">a..</text></g><g><title>malloc (6,367,220 samples, 1.82%)</title><rect x="43.5443%" y="629" width="1.8241%" height="15" fill="rgb(209,38,44)" fg:x="151999153" fg:w="6367220"/><text x="43.7943%" y="639.50">m..</text></g><g><title>[libc.so.6] (6,367,220 samples, 1.82%)</title><rect x="43.5443%" y="613" width="1.8241%" height="15" fill="rgb(236,212,23)" fg:x="151999153" fg:w="6367220"/><text x="43.7943%" y="623.50">[..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3,427,998 samples, 0.98%)</title><rect x="46.2399%" y="677" width="0.9820%" height="15" fill="rgb(242,79,21)" fg:x="161408486" fg:w="3427998"/><text x="46.4899%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (29,076,925 samples, 8.33%)</title><rect x="46.2399%" y="709" width="8.3299%" height="15" fill="rgb(211,96,35)" fg:x="161408486" fg:w="29076925"/><text x="46.4899%" y="719.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (29,076,925 samples, 8.33%)</title><rect x="46.2399%" y="693" width="8.3299%" height="15" fill="rgb(253,215,40)" fg:x="161408486" fg:w="29076925"/><text x="46.4899%" y="703.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::finish_grow (25,648,927 samples, 7.35%)</title><rect x="47.2219%" y="677" width="7.3478%" height="15" fill="rgb(211,81,21)" fg:x="164836484" fg:w="25648927"/><text x="47.4719%" y="687.50">alloc::raw..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (25,648,927 samples, 7.35%)</title><rect x="47.2219%" y="661" width="7.3478%" height="15" fill="rgb(208,190,38)" fg:x="164836484" fg:w="25648927"/><text x="47.4719%" y="671.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::Global::grow_impl (25,648,927 samples, 7.35%)</title><rect x="47.2219%" y="645" width="7.3478%" height="15" fill="rgb(235,213,38)" fg:x="164836484" fg:w="25648927"/><text x="47.4719%" y="655.50">alloc::all..</text></g><g><title>alloc::alloc::realloc (22,650,086 samples, 6.49%)</title><rect x="48.0810%" y="629" width="6.4887%" height="15" fill="rgb(237,122,38)" fg:x="167835325" fg:w="22650086"/><text x="48.3310%" y="639.50">alloc::a..</text></g><g><title>realloc (22,650,086 samples, 6.49%)</title><rect x="48.0810%" y="613" width="6.4887%" height="15" fill="rgb(244,218,35)" fg:x="167835325" fg:w="22650086"/><text x="48.3310%" y="623.50">realloc</text></g><g><title>[libc.so.6] (19,132,940 samples, 5.48%)</title><rect x="49.0886%" y="597" width="5.4812%" height="15" fill="rgb(240,68,47)" fg:x="171352471" fg:w="19132940"/><text x="49.3386%" y="607.50">[libc.s..</text></g><g><title>[libc.so.6] (19,132,940 samples, 5.48%)</title><rect x="49.0886%" y="581" width="5.4812%" height="15" fill="rgb(210,16,53)" fg:x="171352471" fg:w="19132940"/><text x="49.3386%" y="591.50">[libc.s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (38,436,872 samples, 11.01%)</title><rect x="45.3684%" y="725" width="11.0113%" height="15" fill="rgb(235,124,12)" fg:x="158366373" fg:w="38436872"/><text x="45.6184%" y="735.50">alloc::vec::Vec&lt;..</text></g><g><title>core::ptr::write (6,317,834 samples, 1.81%)</title><rect x="54.5698%" y="709" width="1.8099%" height="15" fill="rgb(224,169,11)" fg:x="190485411" fg:w="6317834"/><text x="54.8198%" y="719.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;redoxql::page::PhysicalPage&gt;&gt;&gt; (6,855,104 samples, 1.96%)</title><rect x="56.3797%" y="725" width="1.9638%" height="15" fill="rgb(250,166,2)" fg:x="196803245" fg:w="6855104"/><text x="56.6297%" y="735.50">c..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6,855,104 samples, 1.96%)</title><rect x="56.3797%" y="709" width="1.9638%" height="15" fill="rgb(242,216,29)" fg:x="196803245" fg:w="6855104"/><text x="56.6297%" y="719.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;redoxql::page::PhysicalPage&gt;&gt; (3,135,053 samples, 0.90%)</title><rect x="58.3435%" y="725" width="0.8981%" height="15" fill="rgb(230,116,27)" fg:x="203658349" fg:w="3135053"/><text x="58.5935%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,135,053 samples, 0.90%)</title><rect x="58.3435%" y="709" width="0.8981%" height="15" fill="rgb(228,99,48)" fg:x="203658349" fg:w="3135053"/><text x="58.5935%" y="719.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (3,135,053 samples, 0.90%)</title><rect x="58.3435%" y="693" width="0.8981%" height="15" fill="rgb(253,11,6)" fg:x="203658349" fg:w="3135053"/><text x="58.5935%" y="703.50"></text></g><g><title>redoxql::container::TailContainer::base_rid_page (4,808,485 samples, 1.38%)</title><rect x="59.2416%" y="725" width="1.3775%" height="15" fill="rgb(247,143,39)" fg:x="206793402" fg:w="4808485"/><text x="59.4916%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (4,808,485 samples, 1.38%)</title><rect x="59.2416%" y="709" width="1.3775%" height="15" fill="rgb(236,97,10)" fg:x="206793402" fg:w="4808485"/><text x="59.4916%" y="719.50"></text></g><g><title>redoxql::container::TailContainer::column_page (8,045,528 samples, 2.30%)</title><rect x="60.6191%" y="725" width="2.3049%" height="15" fill="rgb(233,208,19)" fg:x="211601887" fg:w="8045528"/><text x="60.8691%" y="735.50">r..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (8,045,528 samples, 2.30%)</title><rect x="60.6191%" y="709" width="2.3049%" height="15" fill="rgb(216,164,2)" fg:x="211601887" fg:w="8045528"/><text x="60.8691%" y="719.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,276,693 samples, 0.94%)</title><rect x="63.8795%" y="693" width="0.9387%" height="15" fill="rgb(220,129,5)" fg:x="222982807" fg:w="3276693"/><text x="64.1295%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3,276,693 samples, 0.94%)</title><rect x="63.8795%" y="677" width="0.9387%" height="15" fill="rgb(242,17,10)" fg:x="222982807" fg:w="3276693"/><text x="64.1295%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,276,693 samples, 0.94%)</title><rect x="63.8795%" y="661" width="0.9387%" height="15" fill="rgb(242,107,0)" fg:x="222982807" fg:w="3276693"/><text x="64.1295%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3,276,693 samples, 0.94%)</title><rect x="63.8795%" y="645" width="0.9387%" height="15" fill="rgb(251,28,31)" fg:x="222982807" fg:w="3276693"/><text x="64.1295%" y="655.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3,276,693 samples, 0.94%)</title><rect x="63.8795%" y="629" width="0.9387%" height="15" fill="rgb(233,223,10)" fg:x="222982807" fg:w="3276693"/><text x="64.1295%" y="639.50"></text></g><g><title>alloc::alloc::realloc (3,276,693 samples, 0.94%)</title><rect x="63.8795%" y="613" width="0.9387%" height="15" fill="rgb(215,21,27)" fg:x="222982807" fg:w="3276693"/><text x="64.1295%" y="623.50"></text></g><g><title>realloc (3,276,693 samples, 0.94%)</title><rect x="63.8795%" y="597" width="0.9387%" height="15" fill="rgb(232,23,21)" fg:x="222982807" fg:w="3276693"/><text x="64.1295%" y="607.50"></text></g><g><title>[libc.so.6] (3,276,693 samples, 0.94%)</title><rect x="63.8795%" y="581" width="0.9387%" height="15" fill="rgb(244,5,23)" fg:x="222982807" fg:w="3276693"/><text x="64.1295%" y="591.50"></text></g><g><title>[libc.so.6] (3,276,693 samples, 0.94%)</title><rect x="63.8795%" y="565" width="0.9387%" height="15" fill="rgb(226,81,46)" fg:x="222982807" fg:w="3276693"/><text x="64.1295%" y="575.50"></text></g><g><title>[unknown] (3,276,693 samples, 0.94%)</title><rect x="63.8795%" y="549" width="0.9387%" height="15" fill="rgb(247,70,30)" fg:x="222982807" fg:w="3276693"/><text x="64.1295%" y="559.50"></text></g><g><title>redoxql::page::PhysicalPage::write (7,333,078 samples, 2.10%)</title><rect x="62.9240%" y="725" width="2.1008%" height="15" fill="rgb(212,68,19)" fg:x="219647415" fg:w="7333078"/><text x="63.1740%" y="735.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7,333,078 samples, 2.10%)</title><rect x="62.9240%" y="709" width="2.1008%" height="15" fill="rgb(240,187,13)" fg:x="219647415" fg:w="7333078"/><text x="63.1740%" y="719.50">a..</text></g><g><title>core::ptr::write (720,993 samples, 0.21%)</title><rect x="64.8182%" y="693" width="0.2065%" height="15" fill="rgb(223,113,26)" fg:x="226259500" fg:w="720993"/><text x="65.0682%" y="703.50"></text></g><g><title>[unknown] (720,993 samples, 0.21%)</title><rect x="64.8182%" y="677" width="0.2065%" height="15" fill="rgb(206,192,2)" fg:x="226259500" fg:w="720993"/><text x="65.0682%" y="687.50"></text></g><g><title>[unknown] (720,993 samples, 0.21%)</title><rect x="64.8182%" y="661" width="0.2065%" height="15" fill="rgb(241,108,4)" fg:x="226259500" fg:w="720993"/><text x="65.0682%" y="671.50"></text></g><g><title>[unknown] (720,993 samples, 0.21%)</title><rect x="64.8182%" y="645" width="0.2065%" height="15" fill="rgb(247,173,49)" fg:x="226259500" fg:w="720993"/><text x="65.0682%" y="655.50"></text></g><g><title>[unknown] (720,993 samples, 0.21%)</title><rect x="64.8182%" y="629" width="0.2065%" height="15" fill="rgb(224,114,35)" fg:x="226259500" fg:w="720993"/><text x="65.0682%" y="639.50"></text></g><g><title>[unknown] (720,993 samples, 0.21%)</title><rect x="64.8182%" y="613" width="0.2065%" height="15" fill="rgb(245,159,27)" fg:x="226259500" fg:w="720993"/><text x="65.0682%" y="623.50"></text></g><g><title>redoxql::container::TailContainer::insert_record (84,232,153 samples, 24.13%)</title><rect x="40.8942%" y="741" width="24.1306%" height="15" fill="rgb(245,172,44)" fg:x="142748503" fg:w="84232153"/><text x="41.1442%" y="751.50">redoxql::container::TailContainer::ins..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12,453,075 samples, 3.57%)</title><rect x="65.0248%" y="709" width="3.5675%" height="15" fill="rgb(236,23,11)" fg:x="226980656" fg:w="12453075"/><text x="65.2748%" y="719.50">&lt;all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12,453,075 samples, 3.57%)</title><rect x="65.0248%" y="693" width="3.5675%" height="15" fill="rgb(205,117,38)" fg:x="226980656" fg:w="12453075"/><text x="65.2748%" y="703.50">allo..</text></g><g><title>alloc::slice::hack::to_vec (12,453,075 samples, 3.57%)</title><rect x="65.0248%" y="677" width="3.5675%" height="15" fill="rgb(237,72,25)" fg:x="226980656" fg:w="12453075"/><text x="65.2748%" y="687.50">allo..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12,453,075 samples, 3.57%)</title><rect x="65.0248%" y="661" width="3.5675%" height="15" fill="rgb(244,70,9)" fg:x="226980656" fg:w="12453075"/><text x="65.2748%" y="671.50">&lt;T a..</text></g><g><title>&lt;redoxql::record::RecordAddress as core::clone::Clone&gt;::clone (12,453,075 samples, 3.57%)</title><rect x="65.0248%" y="645" width="3.5675%" height="15" fill="rgb(217,125,39)" fg:x="226980656" fg:w="12453075"/><text x="65.2748%" y="655.50">&lt;red..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (12,453,075 samples, 3.57%)</title><rect x="65.0248%" y="629" width="3.5675%" height="15" fill="rgb(235,36,10)" fg:x="226980656" fg:w="12453075"/><text x="65.2748%" y="639.50">&lt;all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (19,677,187 samples, 5.64%)</title><rect x="71.2380%" y="645" width="5.6371%" height="15" fill="rgb(251,123,47)" fg:x="248669029" fg:w="19677187"/><text x="71.4880%" y="655.50">&lt;alloc:..</text></g><g><title>alloc::alloc::Global::grow_impl (19,677,187 samples, 5.64%)</title><rect x="71.2380%" y="629" width="5.6371%" height="15" fill="rgb(221,13,13)" fg:x="248669029" fg:w="19677187"/><text x="71.4880%" y="639.50">alloc::..</text></g><g><title>alloc::alloc::realloc (19,677,187 samples, 5.64%)</title><rect x="71.2380%" y="613" width="5.6371%" height="15" fill="rgb(238,131,9)" fg:x="248669029" fg:w="19677187"/><text x="71.4880%" y="623.50">alloc::..</text></g><g><title>realloc (19,677,175 samples, 5.64%)</title><rect x="71.2380%" y="597" width="5.6371%" height="15" fill="rgb(211,50,8)" fg:x="248669041" fg:w="19677175"/><text x="71.4880%" y="607.50">realloc</text></g><g><title>[libc.so.6] (12,565,152 samples, 3.60%)</title><rect x="73.2755%" y="581" width="3.5996%" height="15" fill="rgb(245,182,24)" fg:x="255781064" fg:w="12565152"/><text x="73.5255%" y="591.50">[lib..</text></g><g><title>[libc.so.6] (12,565,152 samples, 3.60%)</title><rect x="73.2755%" y="565" width="3.5996%" height="15" fill="rgb(242,14,37)" fg:x="255781064" fg:w="12565152"/><text x="73.5255%" y="575.50">[lib..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (27,808,983 samples, 7.97%)</title><rect x="70.3691%" y="693" width="7.9666%" height="15" fill="rgb(246,228,12)" fg:x="245635826" fg:w="27808983"/><text x="70.6191%" y="703.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (27,808,983 samples, 7.97%)</title><rect x="70.3691%" y="677" width="7.9666%" height="15" fill="rgb(213,55,15)" fg:x="245635826" fg:w="27808983"/><text x="70.6191%" y="687.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::finish_grow (24,775,780 samples, 7.10%)</title><rect x="71.2380%" y="661" width="7.0977%" height="15" fill="rgb(209,9,3)" fg:x="248669029" fg:w="24775780"/><text x="71.4880%" y="671.50">alloc::raw..</text></g><g><title>malloc (5,098,593 samples, 1.46%)</title><rect x="76.8751%" y="645" width="1.4606%" height="15" fill="rgb(230,59,30)" fg:x="268346216" fg:w="5098593"/><text x="77.1251%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (36,979,660 samples, 10.59%)</title><rect x="68.5923%" y="709" width="10.5938%" height="15" fill="rgb(209,121,21)" fg:x="239433731" fg:w="36979660"/><text x="68.8423%" y="719.50">alloc::vec::Vec..</text></g><g><title>core::ptr::write (2,968,582 samples, 0.85%)</title><rect x="78.3357%" y="693" width="0.8504%" height="15" fill="rgb(220,109,13)" fg:x="273444809" fg:w="2968582"/><text x="78.5857%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;redoxql::record::RecordAddress&gt;&gt; (3,177,958 samples, 0.91%)</title><rect x="79.1862%" y="709" width="0.9104%" height="15" fill="rgb(232,18,1)" fg:x="276413391" fg:w="3177958"/><text x="79.4362%" y="719.50"></text></g><g><title>cfree (3,177,958 samples, 0.91%)</title><rect x="79.1862%" y="693" width="0.9104%" height="15" fill="rgb(215,41,42)" fg:x="276413391" fg:w="3177958"/><text x="79.4362%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;redoxql::record::RecordAddress&gt; (7,521,631 samples, 2.15%)</title><rect x="80.0966%" y="709" width="2.1548%" height="15" fill="rgb(224,123,36)" fg:x="279591349" fg:w="7521631"/><text x="80.3466%" y="719.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;redoxql::page::PhysicalPage&gt;&gt;&gt; (7,521,631 samples, 2.15%)</title><rect x="80.0966%" y="693" width="2.1548%" height="15" fill="rgb(240,125,3)" fg:x="279591349" fg:w="7521631"/><text x="80.3466%" y="703.50">c..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,521,631 samples, 2.15%)</title><rect x="80.0966%" y="677" width="2.1548%" height="15" fill="rgb(205,98,50)" fg:x="279591349" fg:w="7521631"/><text x="80.3466%" y="687.50">&lt;..</text></g><g><title>std::sync::poison::Flag::done (5,815,008 samples, 1.67%)</title><rect x="82.2514%" y="677" width="1.6659%" height="15" fill="rgb(205,185,37)" fg:x="287112980" fg:w="5815008"/><text x="82.5014%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;redoxql::page::PhysicalPage&gt;&gt; (20,140,954 samples, 5.77%)</title><rect x="82.2514%" y="709" width="5.7699%" height="15" fill="rgb(238,207,15)" fg:x="287112980" fg:w="20140954"/><text x="82.5014%" y="719.50">core::p..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20,140,954 samples, 5.77%)</title><rect x="82.2514%" y="693" width="5.7699%" height="15" fill="rgb(213,199,42)" fg:x="287112980" fg:w="20140954"/><text x="82.5014%" y="703.50">&lt;std::s..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (14,325,946 samples, 4.10%)</title><rect x="83.9172%" y="677" width="4.1041%" height="15" fill="rgb(235,201,11)" fg:x="292927988" fg:w="14325946"/><text x="84.1672%" y="687.50">std:..</text></g><g><title>core::sync::atomic::AtomicU32::swap (4,273,189 samples, 1.22%)</title><rect x="86.7971%" y="661" width="1.2242%" height="15" fill="rgb(207,46,11)" fg:x="302980745" fg:w="4273189"/><text x="87.0471%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_swap (4,273,189 samples, 1.22%)</title><rect x="86.7971%" y="645" width="1.2242%" height="15" fill="rgb(241,35,35)" fg:x="302980745" fg:w="4273189"/><text x="87.0471%" y="655.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (4,053,120 samples, 1.16%)</title><rect x="88.0213%" y="693" width="1.1611%" height="15" fill="rgb(243,32,47)" fg:x="307253934" fg:w="4053120"/><text x="88.2713%" y="703.50"></text></g><g><title>std::sync::poison::Flag::guard (4,053,120 samples, 1.16%)</title><rect x="88.0213%" y="677" width="1.1611%" height="15" fill="rgb(247,202,23)" fg:x="307253934" fg:w="4053120"/><text x="88.2713%" y="687.50"></text></g><g><title>std::thread::panicking (4,053,120 samples, 1.16%)</title><rect x="88.0213%" y="661" width="1.1611%" height="15" fill="rgb(219,102,11)" fg:x="307253934" fg:w="4053120"/><text x="88.2713%" y="671.50"></text></g><g><title>std::panicking::panicking (4,053,120 samples, 1.16%)</title><rect x="88.0213%" y="645" width="1.1611%" height="15" fill="rgb(243,110,44)" fg:x="307253934" fg:w="4053120"/><text x="88.2713%" y="655.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (4,053,120 samples, 1.16%)</title><rect x="88.0213%" y="629" width="1.1611%" height="15" fill="rgb(222,74,54)" fg:x="307253934" fg:w="4053120"/><text x="88.2713%" y="639.50"></text></g><g><title>redoxql::pagerange::PageRange::read (91,005,268 samples, 26.07%)</title><rect x="65.0248%" y="741" width="26.0709%" height="15" fill="rgb(216,99,12)" fg:x="226980656" fg:w="91005268"/><text x="65.2748%" y="751.50">redoxql::pagerange::PageRange::read</text></g><g><title>redoxql::container::BaseContainer::read_record (91,005,268 samples, 26.07%)</title><rect x="65.0248%" y="725" width="26.0709%" height="15" fill="rgb(226,22,26)" fg:x="226980656" fg:w="91005268"/><text x="65.2748%" y="735.50">redoxql::container::BaseContainer::read_re..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (10,731,990 samples, 3.07%)</title><rect x="88.0213%" y="709" width="3.0745%" height="15" fill="rgb(217,163,10)" fg:x="307253934" fg:w="10731990"/><text x="88.2713%" y="719.50">std..</text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (6,678,870 samples, 1.91%)</title><rect x="89.1824%" y="693" width="1.9133%" height="15" fill="rgb(213,25,53)" fg:x="311307054" fg:w="6678870"/><text x="89.4324%" y="703.50">s..</text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (6,678,870 samples, 1.91%)</title><rect x="89.1824%" y="677" width="1.9133%" height="15" fill="rgb(252,105,26)" fg:x="311307054" fg:w="6678870"/><text x="89.4324%" y="687.50">c..</text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (6,678,870 samples, 1.91%)</title><rect x="89.1824%" y="661" width="1.9133%" height="15" fill="rgb(220,39,43)" fg:x="311307054" fg:w="6678870"/><text x="89.4324%" y="671.50">c..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3,171,832 samples, 0.91%)</title><rect x="91.0958%" y="661" width="0.9087%" height="15" fill="rgb(229,68,48)" fg:x="317985924" fg:w="3171832"/><text x="91.3458%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3,171,832 samples, 0.91%)</title><rect x="91.0958%" y="645" width="0.9087%" height="15" fill="rgb(252,8,32)" fg:x="317985924" fg:w="3171832"/><text x="91.3458%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3,171,832 samples, 0.91%)</title><rect x="91.0958%" y="629" width="0.9087%" height="15" fill="rgb(223,20,43)" fg:x="317985924" fg:w="3171832"/><text x="91.3458%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3,171,832 samples, 0.91%)</title><rect x="91.0958%" y="613" width="0.9087%" height="15" fill="rgb(229,81,49)" fg:x="317985924" fg:w="3171832"/><text x="91.3458%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (6,304,149 samples, 1.81%)</title><rect x="91.0958%" y="693" width="1.8060%" height="15" fill="rgb(236,28,36)" fg:x="317985924" fg:w="6304149"/><text x="91.3458%" y="703.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (6,304,149 samples, 1.81%)</title><rect x="91.0958%" y="677" width="1.8060%" height="15" fill="rgb(249,185,26)" fg:x="317985924" fg:w="6304149"/><text x="91.3458%" y="687.50">c..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3,132,317 samples, 0.90%)</title><rect x="92.0044%" y="661" width="0.8973%" height="15" fill="rgb(249,174,33)" fg:x="321157756" fg:w="3132317"/><text x="92.2544%" y="671.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3,132,317 samples, 0.90%)</title><rect x="92.0044%" y="645" width="0.8973%" height="15" fill="rgb(233,201,37)" fg:x="321157756" fg:w="3132317"/><text x="92.2544%" y="655.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3,132,317 samples, 0.90%)</title><rect x="92.0044%" y="629" width="0.8973%" height="15" fill="rgb(221,78,26)" fg:x="321157756" fg:w="3132317"/><text x="92.2544%" y="639.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3,132,317 samples, 0.90%)</title><rect x="92.0044%" y="613" width="0.8973%" height="15" fill="rgb(250,127,30)" fg:x="321157756" fg:w="3132317"/><text x="92.2544%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3,200,640 samples, 0.92%)</title><rect x="92.9018%" y="645" width="0.9169%" height="15" fill="rgb(230,49,44)" fg:x="324290073" fg:w="3200640"/><text x="93.1518%" y="655.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3,200,640 samples, 0.92%)</title><rect x="92.9018%" y="629" width="0.9169%" height="15" fill="rgb(229,67,23)" fg:x="324290073" fg:w="3200640"/><text x="93.1518%" y="639.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (14,087,204 samples, 4.04%)</title><rect x="91.0958%" y="741" width="4.0357%" height="15" fill="rgb(249,83,47)" fg:x="317985924" fg:w="14087204"/><text x="91.3458%" y="751.50">std:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (14,087,204 samples, 4.04%)</title><rect x="91.0958%" y="725" width="4.0357%" height="15" fill="rgb(215,43,3)" fg:x="317985924" fg:w="14087204"/><text x="91.3458%" y="735.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (14,087,204 samples, 4.04%)</title><rect x="91.0958%" y="709" width="4.0357%" height="15" fill="rgb(238,154,13)" fg:x="317985924" fg:w="14087204"/><text x="91.3458%" y="719.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (7,783,055 samples, 2.23%)</title><rect x="92.9018%" y="693" width="2.2297%" height="15" fill="rgb(219,56,2)" fg:x="324290073" fg:w="7783055"/><text x="93.1518%" y="703.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7,783,055 samples, 2.23%)</title><rect x="92.9018%" y="677" width="2.2297%" height="15" fill="rgb(233,0,4)" fg:x="324290073" fg:w="7783055"/><text x="93.1518%" y="687.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (7,783,055 samples, 2.23%)</title><rect x="92.9018%" y="661" width="2.2297%" height="15" fill="rgb(235,30,7)" fg:x="324290073" fg:w="7783055"/><text x="93.1518%" y="671.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (4,582,415 samples, 1.31%)</title><rect x="93.8187%" y="645" width="1.3128%" height="15" fill="rgb(250,79,13)" fg:x="327490713" fg:w="4582415"/><text x="94.0687%" y="655.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (4,582,415 samples, 1.31%)</title><rect x="93.8187%" y="629" width="1.3128%" height="15" fill="rgb(211,146,34)" fg:x="327490713" fg:w="4582415"/><text x="94.0687%" y="639.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4,582,415 samples, 1.31%)</title><rect x="93.8187%" y="613" width="1.3128%" height="15" fill="rgb(228,22,38)" fg:x="327490713" fg:w="4582415"/><text x="94.0687%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4,582,415 samples, 1.31%)</title><rect x="93.8187%" y="597" width="1.3128%" height="15" fill="rgb(235,168,5)" fg:x="327490713" fg:w="4582415"/><text x="94.0687%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i64&gt;::eq (4,582,415 samples, 1.31%)</title><rect x="93.8187%" y="581" width="1.3128%" height="15" fill="rgb(221,155,16)" fg:x="327490713" fg:w="4582415"/><text x="94.0687%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,152,189 samples, 1.19%)</title><rect x="95.1314%" y="629" width="1.1895%" height="15" fill="rgb(215,215,53)" fg:x="332073128" fg:w="4152189"/><text x="95.3814%" y="639.50"></text></g><g><title>[unknown] (4,152,189 samples, 1.19%)</title><rect x="95.1314%" y="613" width="1.1895%" height="15" fill="rgb(223,4,10)" fg:x="332073128" fg:w="4152189"/><text x="95.3814%" y="623.50"></text></g><g><title>[unknown] (4,152,189 samples, 1.19%)</title><rect x="95.1314%" y="597" width="1.1895%" height="15" fill="rgb(234,103,6)" fg:x="332073128" fg:w="4152189"/><text x="95.3814%" y="607.50"></text></g><g><title>[unknown] (4,152,189 samples, 1.19%)</title><rect x="95.1314%" y="581" width="1.1895%" height="15" fill="rgb(227,97,0)" fg:x="332073128" fg:w="4152189"/><text x="95.3814%" y="591.50"></text></g><g><title>[unknown] (4,152,189 samples, 1.19%)</title><rect x="95.1314%" y="565" width="1.1895%" height="15" fill="rgb(234,150,53)" fg:x="332073128" fg:w="4152189"/><text x="95.3814%" y="575.50"></text></g><g><title>[unknown] (4,152,189 samples, 1.19%)</title><rect x="95.1314%" y="549" width="1.1895%" height="15" fill="rgb(228,201,54)" fg:x="332073128" fg:w="4152189"/><text x="95.3814%" y="559.50"></text></g><g><title>[unknown] (4,152,189 samples, 1.19%)</title><rect x="95.1314%" y="533" width="1.1895%" height="15" fill="rgb(222,22,37)" fg:x="332073128" fg:w="4152189"/><text x="95.3814%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (7,981,524 samples, 2.29%)</title><rect x="95.1314%" y="693" width="2.2865%" height="15" fill="rgb(237,53,32)" fg:x="332073128" fg:w="7981524"/><text x="95.3814%" y="703.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7,981,524 samples, 2.29%)</title><rect x="95.1314%" y="677" width="2.2865%" height="15" fill="rgb(233,25,53)" fg:x="332073128" fg:w="7981524"/><text x="95.3814%" y="687.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (7,981,524 samples, 2.29%)</title><rect x="95.1314%" y="661" width="2.2865%" height="15" fill="rgb(210,40,34)" fg:x="332073128" fg:w="7981524"/><text x="95.3814%" y="671.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (7,981,524 samples, 2.29%)</title><rect x="95.1314%" y="645" width="2.2865%" height="15" fill="rgb(241,220,44)" fg:x="332073128" fg:w="7981524"/><text x="95.3814%" y="655.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (3,829,335 samples, 1.10%)</title><rect x="96.3209%" y="629" width="1.0970%" height="15" fill="rgb(235,28,35)" fg:x="336225317" fg:w="3829335"/><text x="96.5709%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (3,829,335 samples, 1.10%)</title><rect x="96.3209%" y="613" width="1.0970%" height="15" fill="rgb(210,56,17)" fg:x="336225317" fg:w="3829335"/><text x="96.5709%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3,829,335 samples, 1.10%)</title><rect x="96.3209%" y="597" width="1.0970%" height="15" fill="rgb(224,130,29)" fg:x="336225317" fg:w="3829335"/><text x="96.5709%" y="607.50"></text></g><g><title>thousands_of_up (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="1189" width="98.3150%" height="15" fill="rgb(235,212,8)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="1199.50">thousands_of_up</text></g><g><title>[libc.so.6] (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="1173" width="98.3150%" height="15" fill="rgb(223,33,50)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="1183.50">[libc.so.6]</text></g><g><title>[libc.so.6] (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="1157" width="98.3150%" height="15" fill="rgb(219,149,13)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="1167.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="1141" width="98.3150%" height="15" fill="rgb(250,156,29)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="1151.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="1125" width="98.3150%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="1135.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="1109" width="98.3150%" height="15" fill="rgb(216,135,14)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="1119.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="1093" width="98.3150%" height="15" fill="rgb(241,47,5)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="1103.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="1077" width="98.3150%" height="15" fill="rgb(233,42,35)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="1087.50">std::thread::Builder::spawn_unchecked_::_{{closure}}</text></g><g><title>std::panic::catch_unwind (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="1061" width="98.3150%" height="15" fill="rgb(231,13,6)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="1071.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="1045" width="98.3150%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="1055.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="1029" width="98.3150%" height="15" fill="rgb(254,173,49)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="1039.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="1013" width="98.3150%" height="15" fill="rgb(221,1,38)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="1023.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="997" width="98.3150%" height="15" fill="rgb(206,124,46)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="1007.50">std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="981" width="98.3150%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="991.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>test::run_test::_{{closure}} (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="965" width="98.3150%" height="15" fill="rgb(222,201,40)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="975.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test::_{{closure}} (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="949" width="98.3150%" height="15" fill="rgb(235,61,29)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="959.50">test::run_test::_{{closure}}</text></g><g><title>test::run_test_in_process (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="933" width="98.3150%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="943.50">test::run_test_in_process</text></g><g><title>std::panic::catch_unwind (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="917" width="98.3150%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="901" width="98.3150%" height="15" fill="rgb(239,76,54)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="885" width="98.3150%" height="15" fill="rgb(231,124,27)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="869" width="98.3150%" height="15" fill="rgb(249,195,6)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="879.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>test::run_test_in_process::_{{closure}} (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="853" width="98.3150%" height="15" fill="rgb(237,174,47)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="863.50">test::run_test_in_process::_{{closure}}</text></g><g><title>test::__rust_begin_short_backtrace (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="837" width="98.3150%" height="15" fill="rgb(206,201,31)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="847.50">test::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="821" width="98.3150%" height="15" fill="rgb(231,57,52)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="831.50">core::ops::function::FnOnce::call_once</text></g><g><title>core::ops::function::FnOnce::call_once (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="805" width="98.3150%" height="15" fill="rgb(248,177,22)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="815.50">core::ops::function::FnOnce::call_once</text></g><g><title>update_tests::thousands_of_updates_test::_{{closure}} (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="789" width="98.3150%" height="15" fill="rgb(215,211,37)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="799.50">update_tests::thousands_of_updates_test::_{{closure}}</text></g><g><title>update_tests::thousands_of_updates_test (343,185,963 samples, 98.31%)</title><rect x="0.0000%" y="773" width="98.3150%" height="15" fill="rgb(241,128,51)" fg:x="0" fg:w="343185963"/><text x="0.2500%" y="783.50">update_tests::thousands_of_updates_test</text></g><g><title>redoxql::query::RQuery::update (219,267,613 samples, 62.82%)</title><rect x="35.4998%" y="757" width="62.8152%" height="15" fill="rgb(227,165,31)" fg:x="123918350" fg:w="219267613"/><text x="35.7498%" y="767.50">redoxql::query::RQuery::update</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (11,112,835 samples, 3.18%)</title><rect x="95.1314%" y="741" width="3.1836%" height="15" fill="rgb(228,167,24)" fg:x="332073128" fg:w="11112835"/><text x="95.3814%" y="751.50">std..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11,112,835 samples, 3.18%)</title><rect x="95.1314%" y="725" width="3.1836%" height="15" fill="rgb(228,143,12)" fg:x="332073128" fg:w="11112835"/><text x="95.3814%" y="735.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (11,112,835 samples, 3.18%)</title><rect x="95.1314%" y="709" width="3.1836%" height="15" fill="rgb(249,149,8)" fg:x="332073128" fg:w="11112835"/><text x="95.3814%" y="719.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (3,131,311 samples, 0.90%)</title><rect x="97.4179%" y="693" width="0.8970%" height="15" fill="rgb(243,35,44)" fg:x="340054652" fg:w="3131311"/><text x="97.6679%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3,131,311 samples, 0.90%)</title><rect x="97.4179%" y="677" width="0.8970%" height="15" fill="rgb(246,89,9)" fg:x="340054652" fg:w="3131311"/><text x="97.6679%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (3,131,311 samples, 0.90%)</title><rect x="97.4179%" y="661" width="0.8970%" height="15" fill="rgb(233,213,13)" fg:x="340054652" fg:w="3131311"/><text x="97.6679%" y="671.50"></text></g><g><title>hashbrown::raw::is_full (3,131,311 samples, 0.90%)</title><rect x="97.4179%" y="645" width="0.8970%" height="15" fill="rgb(233,141,41)" fg:x="340054652" fg:w="3131311"/><text x="97.6679%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (956,976 samples, 0.27%)</title><rect x="98.3150%" y="1093" width="0.2742%" height="15" fill="rgb(239,167,4)" fg:x="343185964" fg:w="956976"/><text x="98.5650%" y="1103.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5,587,746 samples, 1.60%)</title><rect x="98.3150%" y="1141" width="1.6008%" height="15" fill="rgb(209,217,16)" fg:x="343185964" fg:w="5587746"/><text x="98.5650%" y="1151.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5,587,746 samples, 1.60%)</title><rect x="98.3150%" y="1125" width="1.6008%" height="15" fill="rgb(219,88,35)" fg:x="343185964" fg:w="5587746"/><text x="98.5650%" y="1135.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5,587,746 samples, 1.60%)</title><rect x="98.3150%" y="1109" width="1.6008%" height="15" fill="rgb(220,193,23)" fg:x="343185964" fg:w="5587746"/><text x="98.5650%" y="1119.50"></text></g><g><title>[unknown] (4,630,770 samples, 1.33%)</title><rect x="98.5891%" y="1093" width="1.3266%" height="15" fill="rgb(230,90,52)" fg:x="344142940" fg:w="4630770"/><text x="98.8391%" y="1103.50"></text></g><g><title>[unknown] (4,630,770 samples, 1.33%)</title><rect x="98.5891%" y="1077" width="1.3266%" height="15" fill="rgb(252,106,19)" fg:x="344142940" fg:w="4630770"/><text x="98.8391%" y="1087.50"></text></g><g><title>[unknown] (4,630,770 samples, 1.33%)</title><rect x="98.5891%" y="1061" width="1.3266%" height="15" fill="rgb(206,74,20)" fg:x="344142940" fg:w="4630770"/><text x="98.8391%" y="1071.50"></text></g><g><title>[unknown] (4,630,770 samples, 1.33%)</title><rect x="98.5891%" y="1045" width="1.3266%" height="15" fill="rgb(230,138,44)" fg:x="344142940" fg:w="4630770"/><text x="98.8391%" y="1055.50"></text></g><g><title>[unknown] (4,630,770 samples, 1.33%)</title><rect x="98.5891%" y="1029" width="1.3266%" height="15" fill="rgb(235,182,43)" fg:x="344142940" fg:w="4630770"/><text x="98.8391%" y="1039.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5,636,334 samples, 1.61%)</title><rect x="98.3150%" y="1157" width="1.6147%" height="15" fill="rgb(242,16,51)" fg:x="343185964" fg:w="5636334"/><text x="98.5650%" y="1167.50"></text></g><g><title>[unknown] (48,588 samples, 0.01%)</title><rect x="99.9158%" y="1141" width="0.0139%" height="15" fill="rgb(248,9,4)" fg:x="348773710" fg:w="48588"/><text x="100.1658%" y="1151.50"></text></g><g><title>[unknown] (45,626 samples, 0.01%)</title><rect x="99.9166%" y="1125" width="0.0131%" height="15" fill="rgb(210,31,22)" fg:x="348776672" fg:w="45626"/><text x="100.1666%" y="1135.50"></text></g><g><title>[unknown] (45,626 samples, 0.01%)</title><rect x="99.9166%" y="1109" width="0.0131%" height="15" fill="rgb(239,54,39)" fg:x="348776672" fg:w="45626"/><text x="100.1666%" y="1119.50"></text></g><g><title>[unknown] (45,445 samples, 0.01%)</title><rect x="99.9167%" y="1093" width="0.0130%" height="15" fill="rgb(230,99,41)" fg:x="348776853" fg:w="45445"/><text x="100.1667%" y="1103.50"></text></g><g><title>[unknown] (45,445 samples, 0.01%)</title><rect x="99.9167%" y="1077" width="0.0130%" height="15" fill="rgb(253,106,12)" fg:x="348776853" fg:w="45445"/><text x="100.1667%" y="1087.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5,636,343 samples, 1.61%)</title><rect x="98.3150%" y="1173" width="1.6147%" height="15" fill="rgb(213,46,41)" fg:x="343185963" fg:w="5636343"/><text x="98.5650%" y="1183.50"></text></g><g><title>[libc.so.6] (245,464 samples, 0.07%)</title><rect x="99.9297%" y="1173" width="0.0703%" height="15" fill="rgb(215,133,35)" fg:x="348822306" fg:w="245464"/><text x="100.1797%" y="1183.50"></text></g><g><title>[libc.so.6] (245,464 samples, 0.07%)</title><rect x="99.9297%" y="1157" width="0.0703%" height="15" fill="rgb(213,28,5)" fg:x="348822306" fg:w="245464"/><text x="100.1797%" y="1167.50"></text></g><g><title>[libc.so.6] (245,464 samples, 0.07%)</title><rect x="99.9297%" y="1141" width="0.0703%" height="15" fill="rgb(215,77,49)" fg:x="348822306" fg:w="245464"/><text x="100.1797%" y="1151.50"></text></g><g><title>all (349,067,771 samples, 100%)</title><rect x="0.0000%" y="1205" width="100.0000%" height="15" fill="rgb(248,100,22)" fg:x="0" fg:w="349067771"/><text x="0.2500%" y="1215.50"></text></g><g><title>update_tests-a3 (5,881,808 samples, 1.69%)</title><rect x="98.3150%" y="1189" width="1.6850%" height="15" fill="rgb(208,67,9)" fg:x="343185963" fg:w="5881808"/><text x="98.5650%" y="1199.50"></text></g></svg></svg>